<?xml version="1.0" encoding="utf-8"?>
<nugget name="SELECT_SINGLE_CHECKER">
 <CLAS CLSNAME="ZCLBC_ABAP_CORE" VERSION="1" LANGU="E" DESCRIPT="Base ABAP utilities class" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCLBC_ABAP_CORE" CMPNAME="RECUPERA_PROG_PRINCIPAL" VERSION="1" LANGU="E" DESCRIPT="Return the main program" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_ABAP_CORE" CMPNAME="RECUPERA_PROG_PRINCIPAL" SCONAME="IM_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object name in the object repository" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SOBJ_NAME"/>
   <parameter CLSNAME="ZCLBC_ABAP_CORE" CMPNAME="RECUPERA_PROG_PRINCIPAL" SCONAME="IM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TROBJTYPE"/>
   <parameter CLSNAME="ZCLBC_ABAP_CORE" CMPNAME="RECUPERA_PROG_PRINCIPAL" SCONAME="RE_MAIN" VERSION="1" LANGU="E" DESCRIPT="SAF: Transport object table" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="CRMT_SAF_TRANSPORT_OBJ_TAB"/>
   <exception CLSNAME="ZCLBC_ABAP_CORE" CMPNAME="RECUPERA_PROG_PRINCIPAL" SCONAME="ER_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Main program not found" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD recupera_prog_principal.

  DATA: vl_obj_name TYPE trobj_name,
        vl_pname    TYPE tfdir-pname.

  CASE im_object.

    WHEN &apos;REPS&apos; OR &apos;PROG&apos;.

      vl_obj_name = im_obj_name.

    WHEN &apos;FUNC&apos;.

      SELECT SINGLE pname
      FROM tfdir
      INTO vl_pname
      WHERE funcname = im_obj_name.

      IF sy-subrc = 0.
        vl_obj_name = vl_pname.
      ENDIF.

  ENDCASE.

  CALL FUNCTION &apos;RS_GET_MAINPROGRAMS&apos;
    EXPORTING
      name         = vl_obj_name
    TABLES
      mainprograms = re_main
    EXCEPTIONS
      cancelled    = 1
      OTHERS       = 2.

  IF sy-subrc &lt;&gt; 0.
    RAISE er_not_found.
  ENDIF.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <CLAS CLSNAME="ZCX_BAPIRET2" VERSION="1" LANGU="E" DESCRIPT="Exception class with BAPIRET2 format" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CX_STATIC_CHECK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_BAPIRET2" CMPNAME="MESSAGE" VERSION="1" LANGU="E" DESCRIPT="Return parameter" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="BAPIRET2" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCX_BAPIRET2" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
  <method CLSNAME="ZCX_BAPIRET2" CMPNAME="GET_MESSAGE" VERSION="1" LANGU="E" DESCRIPT="Get message in BAPIRET2 structure" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCX_BAPIRET2" CMPNAME="GET_MESSAGE" SCONAME="RE_MESSAGE" VERSION="1" LANGU="E" DESCRIPT="Return parameter" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="BAPIRET2"/>
   <source>METHOD get_message.

  re_message = me-&gt;message.

  MESSAGE
  ID re_message-id
  TYPE re_message-type
  NUMBER re_message-number
  WITH re_message-message_v1
       re_message-message_v2
       re_message-message_v3
       re_message-message_v4
  INTO re_message-message.

ENDMETHOD.</source>
  </method>
 </CLAS>
 <DOMA DOMNAME="ZBCDO011" MultiLanguageSupport="X">
  <DDLANGUAGE LANGU="E">
   <DD01V DOMNAME="ZBCDO011" DDLANGUAGE="E" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Usability of an index or primary key" AUTHCLASS="00"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0001" DDLANGUAGE="E" DOMVALUE_L="F" DDTEXT="Full use"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0002" DDLANGUAGE="E" DOMVALUE_L="P" DDTEXT="Partial use"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0003" DDLANGUAGE="E" DOMVALUE_L="N" DDTEXT="Not in use"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD01V DOMNAME="ZBCDO011" DDLANGUAGE="S" DATATYPE="CHAR" LENG="000001" OUTPUTLEN="000001" DECIMALS="000000" VALEXI="X" MASKLEN="0000" DDTEXT="Usabilidad de un índice o clave primaria" AUTHCLASS="00"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0001" DDLANGUAGE="S" DOMVALUE_L="F" DDTEXT="Uso completo"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0002" DDLANGUAGE="S" DOMVALUE_L="P" DDTEXT="Uso parcial"/>
   <DD07V DOMNAME="ZBCDO011" VALPOS="0003" DDLANGUAGE="S" DOMVALUE_L="N" DDTEXT="Sin uso"/>
  </DDLANGUAGE>
 </DOMA>
 <DOMA DOMNAME="ZBCDO0009" MultiLanguageSupport="X">
  <DDLANGUAGE LANGU="E">
   <DD01V DOMNAME="ZBCDO0009" DDLANGUAGE="E" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASKLEN="0000" DDTEXT="ZBCTM0000 Run ID" AUTHCLASS="00"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD01V DOMNAME="ZBCDO0009" DDLANGUAGE="S" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASKLEN="0000" DDTEXT="ID de ejecución ZBCTM0000" AUTHCLASS="00"/>
  </DDLANGUAGE>
 </DOMA>
 <DTEL ROLLNAME="ZBCDE0009" DDLANGUAGE="E" DOMNAME="ZBCDO0009" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="ZBCTM0000 run ID" REPTEXT="Run ID" SCRTEXT_S="ID" SCRTEXT_M="Run ID" SCRTEXT_L="Run ID" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" REFKIND="D" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZBCDE0009" DDLANGUAGE="E" DOMNAME="ZBCDO0009" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="ZBCTM0000 run ID" REPTEXT="Run ID" SCRTEXT_S="ID" SCRTEXT_M="Run ID" SCRTEXT_L="Run ID" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" REFKIND="D"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD04V ROLLNAME="ZBCDE0009" DDLANGUAGE="S" DOMNAME="ZBCDO0009" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="ID ejecución ZBCTM0000" REPTEXT="ID Ejecución" SCRTEXT_S="ID" SCRTEXT_M="ID Ejecución" SCRTEXT_L="ID Ejecución" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" REFKIND="D"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZBCDE0011" DDLANGUAGE="E" DOMNAME="ZBCDO011" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Usability of an index or primary key" REPTEXT="Index use" SCRTEXT_S="Use" SCRTEXT_M="Index use" SCRTEXT_L="Index use" AUTHCLASS="00" DTELMASTER="S" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZBCDE0011" DDLANGUAGE="E" DOMNAME="ZBCDO011" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Usability of an index or primary key" REPTEXT="Index use" SCRTEXT_S="Use" SCRTEXT_M="Index use" SCRTEXT_L="Index use" AUTHCLASS="00" DTELMASTER="S" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD04V ROLLNAME="ZBCDE0011" DDLANGUAGE="S" DOMNAME="ZBCDO011" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DDTEXT="Usabilidad de un índice o clave primaria" REPTEXT="Uso índice" SCRTEXT_S="Uso" SCRTEXT_M="Uso índice" SCRTEXT_L="Uso de un índice" AUTHCLASS="00" DTELMASTER="S" DATATYPE="CHAR" LENG="000001" DECIMALS="000000" OUTPUTLEN="000001" VALEXI="X" REFKIND="D"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZBCDE0012" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DDTEXT="Source code line" REPTEXT="Line #" SCRTEXT_S="#" SCRTEXT_M="Line #" SCRTEXT_L="Source code line" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZBCDE0012" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DDTEXT="Source code line" REPTEXT="Line #" SCRTEXT_S="#" SCRTEXT_M="Line #" SCRTEXT_L="Source code line" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD04V ROLLNAME="ZBCDE0012" DDLANGUAGE="S" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DDTEXT="Número de línea de código" REPTEXT="N° Línea" SCRTEXT_S="N°" SCRTEXT_M="N° Línea" SCRTEXT_L="Número de línea de código" AUTHCLASS="00" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" DECIMALS="000000" OUTPUTLEN="000005"/>
  </DDLANGUAGE>
 </DTEL>
 <DTEL ROLLNAME="ZBCDE0013" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="29" DDTEXT="Error quantity in code" REPTEXT="Quan. Errors" SCRTEXT_S="Quan." SCRTEXT_M="Quan. Errors" SCRTEXT_L="Error quantity in code" AUTHCLASS="00" DTELMASTER="S" DATATYPE="INT2" LENG="000005" DECIMALS="000000" OUTPUTLEN="000006" MultiLanguageSupport="X">
  <tpara/>
  <DDLANGUAGE LANGU="E">
   <DD04V ROLLNAME="ZBCDE0013" DDLANGUAGE="E" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="29" DDTEXT="Error quantity in code" REPTEXT="Quan. Errors" SCRTEXT_S="Quan." SCRTEXT_M="Quan. Errors" SCRTEXT_L="Error quantity in code" AUTHCLASS="00" DTELMASTER="S" DATATYPE="INT2" LENG="000005" DECIMALS="000000" OUTPUTLEN="000006"/>
  </DDLANGUAGE>
  <DDLANGUAGE LANGU="S">
   <DD04V ROLLNAME="ZBCDE0013" DDLANGUAGE="S" ROUTPUTLEN="000000" HEADLEN="13" SCRLEN1="10" SCRLEN2="15" SCRLEN3="29" DDTEXT="Cantidad de errores de código" REPTEXT="Cant. Errores" SCRTEXT_S="Cant." SCRTEXT_M="Cant. Errores" SCRTEXT_L="Cantidad de errores de código" AUTHCLASS="00" DTELMASTER="S" DATATYPE="INT2" LENG="000005" DECIMALS="000000" OUTPUTLEN="000006"/>
  </DDLANGUAGE>
 </DTEL>
 <TABL TABNAME="ZBCES0007" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Secondary Indexes in tables" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZBCES0007" FIELDNAME="TABNAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0007" FIELDNAME="DD03P" DDLANGUAGE="E" POSITION="0002" ROLLNAME="DD03TTYP" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Table Type for Structure DD03P" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0007" FIELDNAME="DD12V" DDLANGUAGE="E" POSITION="0003" ROLLNAME="DML_TT_DD12V" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Table Type for Structure DD12V" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0007" FIELDNAME="DD17V" DDLANGUAGE="E" POSITION="0004" ROLLNAME="DD17V_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="List of Fields in DDIC Format" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZBCES0008" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="SELECT Analysis result" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZBCES0008" FIELDNAME="SENTENCE" DDLANGUAGE="E" POSITION="0001" ROLLNAME="RSLINE" ADMINFIELD="0" INTTYPE="g" INTLEN="000008" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DTELMASTER="D" DATATYPE="STRG" LENG="000000" OUTPUTLEN="000132" DECIMALS="000000" MASK="  STRGE" MASKLEN="0000" DDTEXT="ABAP Source Line" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0008" FIELDNAME="LINE" DDLANGUAGE="E" POSITION="0002" ROLLNAME="INT2" ADMINFIELD="0" INTTYPE="X" INTLEN="000002" DOMNAME="INT2" ROUTPUTLEN="000000" HEADLEN="55" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="INT2" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  INT2E" MASKLEN="0000" DDTEXT="2 byte integer (signed)" REPTEXT="Int2" SCRTEXT_S="Int2" SCRTEXT_M="Int2" SCRTEXT_L="Int2" DOMNAME3L="INT2" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0008" FIELDNAME="DBMATCHES" DDLANGUAGE="E" POSITION="0003" ROLLNAME="ZBCTT0005" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Data base access location" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZBCES0006" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Secondary Indexes use tracking" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZBCES0006" FIELDNAME="PGMID" DDLANGUAGE="E" POSITION="0001" ROLLNAME="PGMID" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" DOMNAME="PGMID" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Program ID in Requests and Tasks" REPTEXT="PgID" SCRTEXT_S="Prog. ID" SCRTEXT_M="Program ID" SCRTEXT_L="Program ID" DOMNAME3L="PGMID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0006" FIELDNAME="OBJECT" DDLANGUAGE="E" POSITION="0002" ROLLNAME="TROBJTYPE" ADMINFIELD="0" INTTYPE="C" INTLEN="000004" DOMNAME="OBJECT" ROUTPUTLEN="000000" HEADLEN="04" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object Type" REPTEXT="Obj." SCRTEXT_S="Obj. Type" SCRTEXT_M="Object Type" SCRTEXT_L="Object Type" DOMNAME3L="OBJECT" SHLPORIGIN="D" SHLPNAME="SCTSOBJECT" SHLPFIELD="OBJECT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0006" FIELDNAME="OBJ_NAME" DDLANGUAGE="E" POSITION="0003" ROLLNAME="TROBJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" DOMNAME="TROBJ_NAME" ROUTPUTLEN="000000" HEADLEN="55" SCRLEN1="10" SCRLEN2="20" SCRLEN3="10" DTELMASTER="D" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object Name in Object List" REPTEXT="Object Name" SCRTEXT_S="Object" SCRTEXT_M="Object Name" SCRTEXT_L="Obj. Name" DOMNAME3L="TROBJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0006" FIELDNAME="ZRESULT" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ZBCTT0008" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="SELECT Analysis result" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZBCTM0000" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="ZBCPRR0002 program run" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZBCTM0000" AS4LOCAL="A" AS4VERS="0000" TABKAT="3" TABART="APPL1" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000003" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="OBJ_NAME" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="TROBJ_NAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="TROBJ_NAME" ROUTPUTLEN="000000" HEADLEN="55" SCRLEN1="10" SCRLEN2="20" SCRLEN3="10" DTELMASTER="D" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object Name in Object List" REPTEXT="Object Name" SCRTEXT_S="Object" SCRTEXT_M="Object Name" SCRTEXT_L="Obj. Name" DOMNAME3L="TROBJ_NAME" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="ID_EJECTION" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZBCDE0009" ADMINFIELD="0" INTTYPE="N" INTLEN="000005" NOTNULL="X" DOMNAME="ZBCDO0009" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="ZBCTM0000 run ID" REPTEXT="Run ID" SCRTEXT_S="ID" SCRTEXT_M="Run ID" SCRTEXT_L="Run ID" DOMNAME3L="ZBCDO0009" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="ADATE" DDLANGUAGE="E" POSITION="0004" ROLLNAME="ADATE" ADMINFIELD="0" INTTYPE="D" INTLEN="000008" DOMNAME="DATUM" ROUTPUTLEN="000000" HEADLEN="10" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="DATS" LENG="000008" OUTPUTLEN="000010" DECIMALS="000000" MASK="  DATSE" MASKLEN="0000" DDTEXT="Processing date" REPTEXT="Date perf." SCRTEXT_S="Date perf." SCRTEXT_M="Date performed" SCRTEXT_L="Processing date" DOMNAME3L="DATUM" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="ATIME" DDLANGUAGE="E" POSITION="0005" ROLLNAME="CCIHE_TIMPROC" ADMINFIELD="0" INTTYPE="T" INTLEN="000006" DOMNAME="TIME" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="22" DTELMASTER="D" DATATYPE="TIMS" LENG="000006" OUTPUTLEN="000008" DECIMALS="000000" MASK="  TIMSE" MASKLEN="0000" DDTEXT="Execution Time" REPTEXT="ExecTime" SCRTEXT_S="Exec. time" SCRTEXT_M="Execution time" SCRTEXT_L="Execution time" DOMNAME3L="TIME" SHLPORIGIN="T" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0000" FIELDNAME="AUSER" DDLANGUAGE="E" POSITION="0006" ROLLNAME="CACS_USER" ADMINFIELD="0" INTTYPE="C" INTLEN="000012" DOMNAME="USNAM" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000012" OUTPUTLEN="000012" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="User Who Triggered the Run (User ID)" REPTEXT="Ordered By" SCRTEXT_S="Ordered By" SCRTEXT_M="Ordered by" SCRTEXT_L="Ordered by" DOMNAME3L="USNAM" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TABL TABNAME="ZBCTM0001" DDLANGUAGE="E" TABCLASS="TRANSP" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" CLIDEP="X" DDTEXT="ZBCPRR0002 program run result" AUTHCLASS="00" MAINFLAG="X" CONTFLAG="A" PROZPUFF="000" EXCLASS="1">
  <dd09l TABNAME="ZBCTM0001" AS4LOCAL="A" AS4VERS="0000" TABKAT="4" TABART="APPL1" SCHFELDANZ="000" BUFALLOW="N"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="MANDT" DDLANGUAGE="E" POSITION="0001" KEYFLAG="X" ROLLNAME="MANDT" ADMINFIELD="0" INTTYPE="C" INTLEN="000003" NOTNULL="X" DOMNAME="MANDT" ROUTPUTLEN="000000" HEADLEN="03" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CLNT" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" ENTITYTAB="T000" MASK="  CLNTE" MASKLEN="0000" DDTEXT="Client" REPTEXT="Cl." SCRTEXT_S="Client" SCRTEXT_M="Client" SCRTEXT_L="Client" DOMNAME3L="MANDT" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="OBJ_NAME" DDLANGUAGE="E" POSITION="0002" KEYFLAG="X" ROLLNAME="TROBJ_NAME" CHECKTABLE="ZBCTM0000" ADMINFIELD="0" INTTYPE="C" INTLEN="000120" NOTNULL="X" DOMNAME="TROBJ_NAME" ROUTPUTLEN="000000" HEADLEN="55" SCRLEN1="10" SCRLEN2="20" SCRLEN3="10" DTELMASTER="D" DATATYPE="CHAR" LENG="000120" OUTPUTLEN="000120" DECIMALS="000000" MASK="  CHARE" MASKLEN="0000" DDTEXT="Object Name in Object List" REPTEXT="Object Name" SCRTEXT_S="Object" SCRTEXT_M="Object Name" SCRTEXT_L="Obj. Name" DOMNAME3L="TROBJ_NAME" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="ID_EJECTION" DDLANGUAGE="E" POSITION="0003" KEYFLAG="X" ROLLNAME="ZBCDE0009" CHECKTABLE="ZBCTM0000" ADMINFIELD="0" INTTYPE="N" INTLEN="000005" NOTNULL="X" DOMNAME="ZBCDO0009" ROUTPUTLEN="000000" HEADLEN="12" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="ZBCTM0000 run ID" REPTEXT="Run ID" SCRTEXT_S="ID" SCRTEXT_M="Run ID" SCRTEXT_L="Run ID" DOMNAME3L="ZBCDO0009" SHLPORIGIN="P" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="COUNTER" DDLANGUAGE="E" POSITION="0004" KEYFLAG="X" ROLLNAME="BP_COUNTER" ADMINFIELD="0" INTTYPE="N" INTLEN="000004" NOTNULL="X" DOMNAME="BP_COUNTER" ROUTPUTLEN="000000" LOGFLAG="X" HEADLEN="06" SCRLEN1="06" SCRLEN2="10" SCRLEN3="15" DTELMASTER="D" DATATYPE="NUMC" LENG="000004" OUTPUTLEN="000004" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Counter" REPTEXT="Count." SCRTEXT_S="Count." SCRTEXT_M="Counter" SCRTEXT_L="Counter" DOMNAME3L="BP_COUNTER" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="TABNAME" DDLANGUAGE="E" POSITION="0005" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="LINE" DDLANGUAGE="E" POSITION="0006" ROLLNAME="ZBCDE0012" ADMINFIELD="0" INTTYPE="N" INTLEN="000005" ROUTPUTLEN="000000" HEADLEN="08" SCRLEN1="10" SCRLEN2="15" SCRLEN3="25" DTELMASTER="S" DATATYPE="NUMC" LENG="000005" OUTPUTLEN="000005" DECIMALS="000000" MASK="  NUMCE" MASKLEN="0000" DDTEXT="Source code line" REPTEXT="Line #" SCRTEXT_S="#" SCRTEXT_M="Line #" SCRTEXT_L="Source code line" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCTM0001" FIELDNAME="INDEXNAME" DDLANGUAGE="E" POSITION="0007" ROLLNAME="INDEXID" ADMINFIELD="0" INTTYPE="C" INTLEN="000003" DOMNAME="INDEXID" ROUTPUTLEN="000000" MEMORYID="DIX" HEADLEN="03" SCRLEN1="10" SCRLEN2="14" SCRLEN3="18" DATATYPE="CHAR" LENG="000003" OUTPUTLEN="000003" DECIMALS="000000" MASK="  CHARE" MASKLEN="0dex" DDTEXT="Unique Index ID in a Table" REPTEXT="Ind" SCRTEXT_S="Index Name" SCRTEXT_M="Index ID" SCRTEXT_L="Index ID" DOMNAME3L="INDEXID" DEPTH="00" COMPTYPE="E" EXCLASS="0" DBPOSITION="0000"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="ID_EJECTION" FORTABLE="ZBCTM0001" FORKEY="MANDT" CHECKTABLE="ZBCTM0000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="ID_EJECTION" FORTABLE="ZBCTM0001" FORKEY="OBJ_NAME" CHECKTABLE="ZBCTM0000" CHECKFIELD="OBJ_NAME" PRIMPOS="0002" DOMNAME="TROBJ_NAME" DATATYPE="CHAR" LENG="000120"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="ID_EJECTION" FORTABLE="ZBCTM0001" FORKEY="ID_EJECTION" CHECKTABLE="ZBCTM0000" CHECKFIELD="ID_EJECTION" PRIMPOS="0003" DOMNAME="ZBCDO0009" DATATYPE="NUMC" LENG="000005"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="OBJ_NAME" FORTABLE="ZBCTM0001" FORKEY="MANDT" CHECKTABLE="ZBCTM0000" CHECKFIELD="MANDT" PRIMPOS="0001" DOMNAME="MANDT" DATATYPE="CLNT" LENG="000003"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="OBJ_NAME" FORTABLE="ZBCTM0001" FORKEY="OBJ_NAME" CHECKTABLE="ZBCTM0000" CHECKFIELD="OBJ_NAME" PRIMPOS="0002" DOMNAME="TROBJ_NAME" DATATYPE="CHAR" LENG="000120"/>
  <dd05m TABNAME="ZBCTM0001" FIELDNAME="OBJ_NAME" FORTABLE="ZBCTM0001" FORKEY="ID_EJECTION" CHECKTABLE="ZBCTM0000" CHECKFIELD="ID_EJECTION" PRIMPOS="0003" DOMNAME="ZBCDO0009" DATATYPE="NUMC" LENG="000005"/>
  <dd08v TABNAME="ZBCTM0001" FIELDNAME="ID_EJECTION" CHECKTABLE="ZBCTM0000" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
  <dd08v TABNAME="ZBCTM0001" FIELDNAME="OBJ_NAME" CHECKTABLE="ZBCTM0000" FRKART="KEY" CARD="CN" CARDLEFT="1"/>
 </TABL>
 <TABL TABNAME="ZBCES0005" DDLANGUAGE="E" TABCLASS="INTTAB" DATMIN="0000000000" DATMAX="0000000000" DATAVG="0000000000" DDTEXT="Data base access location" AUTHCLASS="00" PROZPUFF="000" EXCLASS="4">
  <dd09l AS4VERS="0000" SCHFELDANZ="000"/>
  <dd03p TABNAME="ZBCES0005" FIELDNAME="TABNAME" DDLANGUAGE="E" POSITION="0001" ROLLNAME="TABNAME" ADMINFIELD="0" INTTYPE="C" INTLEN="000030" DOMNAME="AS4TAB" ROUTPUTLEN="000000" MEMORYID="DTB" HEADLEN="30" SCRLEN1="10" SCRLEN2="15" SCRLEN3="20" DTELMASTER="D" DATATYPE="CHAR" LENG="000030" OUTPUTLEN="000030" DECIMALS="000000" ENTITYTAB="DD02L" MASK="  CHARE" MASKLEN="0000" DDTEXT="Table Name" REPTEXT="Table Name" SCRTEXT_S="Table" SCRTEXT_M="Table Name" SCRTEXT_L="Table Name" DOMNAME3L="AS4TAB" DEPTH="00" COMPTYPE="E" DEFFDNAME="TABNAME" EXCLASS="0" DBPOSITION="0000"/>
  <dd03p TABNAME="ZBCES0005" FIELDNAME="FIELDNAME" DDLANGUAGE="E" POSITION="0002" ROLLNAME="FIELDNAME_TAB" ADMINFIELD="0" INTLEN="000000" ROUTPUTLEN="000000" HEADLEN="00" SCRLEN1="00" SCRLEN2="00" SCRLEN3="00" DATATYPE="TTYP" LENG="000000" OUTPUTLEN="000000" DECIMALS="000000" MASK="  TTYPL" MASKLEN="0000" DDTEXT="Table of field names" DEPTH="00" COMPTYPE="L" EXCLASS="0" DBPOSITION="0000"/>
 </TABL>
 <TTYP TYPENAME="ZBCTT0006" DDLANGUAGE="E" ROWTYPE="ZBCES0006" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Secondary index usage tracking" TYPELEN="000136" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZBCTT0005" DDLANGUAGE="E" ROWTYPE="ZBCES0005" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="S" KEYDEF="K" KEYKIND="U" KEYFDCOUNT="0001" DDTEXT="Data base access location" TYPELEN="000040" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000">
  <dd42v TYPENAME="ZBCTT0005" KEYFDPOS="0001" ROWTYPEPOS="0001" KEYFIELD="TABNAME"/>
 </TTYP>
 <TTYP TYPENAME="ZBCTT0007" DDLANGUAGE="E" ROWTYPE="ZBCES0007" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="S" KEYDEF="K" KEYKIND="U" KEYFDCOUNT="0001" DDTEXT="Tables secondary indexes" TYPELEN="000056" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000">
  <dd42v TYPENAME="ZBCTT0007" KEYFDPOS="0001" ROWTYPEPOS="0001" KEYFIELD="TABNAME"/>
 </TTYP>
 <TTYP TYPENAME="ZBCTT0000" DDLANGUAGE="E" ROWTYPE="STRINGVAL" ROWKIND="E" DATATYPE="STRG" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="Source code" TYPELEN="000008" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <TTYP TYPENAME="ZBCTT0008" DDLANGUAGE="E" ROWTYPE="ZBCES0008" ROWKIND="S" DATATYPE="STRU" LENG="000000" DECIMALS="000000" ACCESSMODE="T" KEYDEF="D" KEYKIND="N" KEYFDCOUNT="0000" DDTEXT="SELECT Analysis result" TYPELEN="000024" CTLENG="000000" CTDECIMALS="000000" OCCURS="00000"/>
 <FUGR AREA="ZBCFG0002" SPRAS="E" AREAT="ABAP Core basic functions">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZBCFG0002" SQLX="X" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="200" RLOAD="S" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <dynpros>
    <dynpro PROG="SAPLZBCFG0002" DNUM="0001" FNUM="0001" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="S" DTEXT="Act.vistas: Imagen resumen ZBCTM0000">
     <dynprofield FNAM="TCTRL_ZBCTM0000" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZBCTM0000-OBJ_NAME" DIDX="0078" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Objeto"/>
     <dynprofield FNAM="*ZBCTM0000-ID_EJECTION" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="ID"/>
     <dynprofield FNAM="*ZBCTM0000-ADATE" DIDX="000F" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="88" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Fecha ejecución" RES1="X"/>
     <dynprofield FNAM="*ZBCTM0000-ATIME" DIDX="0008" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="88" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="4" AGLT="00" ADEZ="00" STXT="H.ejec." RES1="X"/>
     <dynprofield FNAM="*ZBCTM0000-AUSER" DIDX="000C" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Pedido por"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZBCTM0000-OBJ_NAME" DIDX="001E" FLG1="B1" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="78" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="78" ADEZ="00" STXT="________________________________________________________________________________________________________________________"/>
     <dynprofield FNAM="ZBCTM0000-ID_EJECTION" DIDX="000A" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="05" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="05" ADEZ="00" STXT="_____"/>
     <dynprofield FNAM="ZBCTM0000-ADATE" DIDX="000F" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="0A" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="DATS" ITYP="D" AGLT="08" ADEZ="00" STXT="__________" RES1="X"/>
     <dynprofield FNAM="ZBCTM0000-ATIME" DIDX="0008" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="08" LENG="08" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="TIMS" ITYP="T" AGLT="06" ADEZ="00" STXT="________" RES1="X"/>
     <dynprofield FNAM="ZBCTM0000-AUSER" DIDX="000C" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="0C" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="C" AGLT="0C" ADEZ="00" STXT="____________"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZBCTM0000 CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZBCTM0000-OBJ_NAME .
    FIELD ZBCTM0000-ID_EJECTION .
    FIELD ZBCTM0000-ADATE .
    FIELD ZBCTM0000-ATIME .
    FIELD ZBCTM0000-AUSER .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZBCTM0000-OBJ_NAME .
    FIELD ZBCTM0000-ID_EJECTION .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
    <dynpro PROG="SAPLZBCFG0002" DNUM="0002" FNUM="0002" BZMX="61 " BZBR="83 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="61 " NOCO="83 " VALP="0 " CUAN="G" SPRA="S" DTEXT="Act.vistas: Imagen resumen ZBCTM0001">
     <dynprofield FNAM="TCTRL_ZBCTM0001" DIDX="003B" FLG1="F8" FLG2="FC" FLG3="00" FILL="T" FMB1="00" FMB2="00" LENG="53" LINE="01" COLN="02" LTYP="E" LANF="65" LBLK="01" LREP="01" AUTH="101" AGLT="00" ADEZ="00"/>
     <dynprofield FNAM="VIM_FRAME_FIELD" DIDX="003C" FLG1="80" FLG2="02" FLG3="88" FMB1="30" FMB2="40" LENG="3C" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________________________________________________"/>
     <dynprofield FNAM="*ZBCTM0001-OBJ_NAME" DIDX="0078" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Objeto"/>
     <dynprofield FNAM="*ZBCTM0001-ID_EJECTION" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="1" AGLT="00" ADEZ="00" STXT="ID"/>
     <dynprofield FNAM="*ZBCTM0001-COUNTER" DIDX="000A" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="A0" LENG="28" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="2" AGLT="00" ADEZ="00" STXT="Contador"/>
     <dynprofield FNAM="*ZBCTM0001-TABNAME" DIDX="001E" FLG1="20" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="3" AGLT="00" ADEZ="00" STXT="Tabla"/>
     <dynprofield FNAM="*ZBCTM0001-LINE" DIDX="0003" FLG1="00" FLG2="00" FLG3="08" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="+"/>
     <dynprofield FNAM="*ZBCTM0001-INDEXNAME" DIDX="0003" FLG1="30" FLG2="00" FLG3="00" FMB1="30" FMB2="80" LENG="28" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" ITYP="4" AGLT="00" ADEZ="00" STXT="Ind"/>
     <dynprofield FNAM="VIM_MARKED" DIDX="0001" FLG1="80" FLG2="00" FLG3="88" FILL="C" FMB1="00" FMB2="20" LENG="01" LINE="01" COLN="00" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" AUTH="102" AGLT="00" ADEZ="00" STXT="_"/>
     <dynprofield FNAM="ZBCTM0001-OBJ_NAME" DIDX="000F" FLG1="B1" FLG2="00" FLG3="84" FMB1="30" FMB2="20" LENG="78" LINE="01" COLN="01" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="CHAR" GRP1="KEY" ITYP="C" AGLT="78" ADEZ="00" STXT="________________________________________________________________________________________________________________________" RES1="X"/>
     <dynprofield FNAM="ZBCTM0001-ID_EJECTION" DIDX="000A" FLG1="B0" FLG2="00" FLG3="84" FMB1="30" FMB2="20" LENG="05" LINE="01" COLN="02" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="05" ADEZ="00" STXT="_____" RES1="X"/>
     <dynprofield FNAM="ZBCTM0001-COUNTER" DIDX="000A" FLG1="B0" FLG2="00" FLG3="80" FMB1="30" FMB2="20" LENG="04" LINE="01" COLN="03" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" GRP1="KEY" ITYP="N" AGLT="04" ADEZ="00" STXT="____"/>
     <dynprofield FNAM="ZBCTM0001-TABNAME" DIDX="001E" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="1E" LINE="01" COLN="04" LTYP="T" LANF="65" LBLK="01" LREP="01" PAID="DTB" TYPE="CHAR" ITYP="C" AGLT="1E" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="ZBCTM0001-LINE" DIDX="0003" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="03" LINE="01" COLN="05" LTYP="T" LANF="65" LBLK="01" LREP="01" TYPE="NUMC" ITYP="N" AGLT="05" ADEZ="00" STXT="___"/>
     <dynprofield FNAM="ZBCTM0001-INDEXNAME" DIDX="0003" FLG1="B0" FLG2="00" FLG3="80" FMB1="00" FMB2="00" LENG="03" LINE="01" COLN="06" LTYP="T" LANF="65" LBLK="01" LREP="01" PAID="DIX" TYPE="CHAR" ITYP="C" AGLT="03" ADEZ="00" STXT="___"/>
     <dynprofield FNAM="VIM_POSI_PUSH" DIDX="0014" FLG1="80" FLG2="00" FLG3="88" FILL="P" FMB1="30" FMB2="00" LENG="14" LINE="3D" COLN="14" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AUTH="103" AGLT="00" ADEZ="00" STXT="____________________" RES1="                                                                                                                                                                        POSI"/>
     <dynprofield FNAM="VIM_POSITION_INFO" DIDX="001E" FLG1="80" FLG2="02" FLG3="88" FMB1="33" FMB2="00" LENG="1E" LINE="3D" COLN="29" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="______________________________"/>
     <dynprofield FNAM="OK_CODE" DIDX="0014" FLG1="80" FLG2="10" FLG3="08" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
     <dynproflowsource>PROCESS BEFORE OUTPUT.
 MODULE LISTE_INITIALISIEREN.
 LOOP AT EXTRACT WITH CONTROL
  TCTRL_ZBCTM0001 CURSOR NEXTLINE.
   MODULE LISTE_SHOW_LISTE.
 ENDLOOP.
*
PROCESS AFTER INPUT.
 MODULE LISTE_EXIT_COMMAND AT EXIT-COMMAND.
 MODULE LISTE_BEFORE_LOOP.
 LOOP AT EXTRACT.
   MODULE LISTE_INIT_WORKAREA.
   CHAIN.
    FIELD ZBCTM0001-OBJ_NAME .
    FIELD ZBCTM0001-ID_EJECTION .
    FIELD ZBCTM0001-COUNTER .
    FIELD ZBCTM0001-TABNAME .
    FIELD ZBCTM0001-LINE .
    FIELD ZBCTM0001-INDEXNAME .
    MODULE SET_UPDATE_FLAG ON CHAIN-REQUEST.
   ENDCHAIN.
   FIELD VIM_MARKED MODULE LISTE_MARK_CHECKBOX.
   CHAIN.
    FIELD ZBCTM0001-OBJ_NAME .
    FIELD ZBCTM0001-ID_EJECTION .
    FIELD ZBCTM0001-COUNTER .
    MODULE LISTE_UPDATE_LISTE.
   ENDCHAIN.
 ENDLOOP.
 MODULE LISTE_AFTER_LOOP.</dynproflowsource>
    </dynpro>
   </dynpros>
   <source>*---------------------------------------------------------------------*
*    generated viewmaintenance function pool
*   generation date: 10.08.2014 at 13:53:14 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZBCFG0002TOP.                     &quot; Global Data
  INCLUDE LZBCFG0002UXX.                     &quot; Function Modules

*******************************************************************
*   include-files generated by view maintenance tool              *
*******************************************************************

*      view related include-files   (never change, please)        *
  INCLUDE LZBCFG0002F00                           . &quot; subprograms
  INCLUDE LZBCFG0002I00                           . &quot; PAI modules

*      general include-files        (never change, please)        *
  INCLUDE LSVIMFXX                                . &quot; subprograms
  INCLUDE LSVIMOXX                                . &quot; PBO modules
  INCLUDE LSVIMIXX                                . &quot; PAI modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZBCFG0002F...                     &quot; Subprograms
* INCLUDE LZBCFG0002O...                     &quot; PBO-Modules
* INCLUDE LZBCFG0002I...                     &quot; PAI-Modules</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZBCFG0002F00" SQLX="X" EDTX="X" SUBC="I" LEVL="700" RLOAD="S">
    <include_source>*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 10.08.2014 at 13:53:14 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .</include_source>
   </include>
   <include NAME="LZBCFG0002I00" SQLX="X" EDTX="X" SUBC="I" LEVL="700" RLOAD="S">
    <include_source>*---------------------------------------------------------------------*
*    view related PAI modules
*   generation date: 10.08.2014 at 13:53:14 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

INCLUDE LSVIMITX . &quot;base table related PAI modules</include_source>
   </include>
   <include NAME="LZBCFG0002TOP" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="200" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>*---------------------------------------------------------------------*
*    generated viewmaintenance function pool top
*   generation date: 10.08.2014 at 13:53:14 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
FUNCTION-POOL ZBCFG0002                  MESSAGE-ID SV.

  INCLUDE LSVIMDAT                                . &quot;general data decl.
  INCLUDE LZBCFG0002T00                           . &quot;view rel. data dcl.</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="TABLEFRAME_ZBCFG0002" STEXT="Actualiz.ampliada tabla, niv.superior">
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 002"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 003"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 004"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 005"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tabelle mit dynam. zu deaktivierenden CUA-Funkt." INDEX=" 006"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 007"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 008"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 009"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEFRAME_ZBCFG0002
*   generation date: 10.08.2014 at 13:53:13 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEFRAME TABLES X_HEADER X_NAMTAB DBA_SELLIST DPL_SELLIST
                            EXCL_CUA_FUNCT
                     USING  CORR_NUMBER VIEW_ACTION VIEW_NAME.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="TABLEPROC_ZBCFG0002" GLOBAL="X" STEXT="Actualiz.ampliada tabla, niv.inferior">
    <importing PARAMETER="FCODE" DEFAULT="&apos;RDED&apos;"/>
    <importing PARAMETER="VIEW_ACTION" DEFAULT="&apos;S&apos;"/>
    <importing PARAMETER="VIEW_NAME" DBFIELD="DD02V-TABNAME"/>
    <importing PARAMETER="CORR_NUMBER" DBFIELD="E070-TRKORR" DEFAULT="&apos; &apos;"/>
    <exporting PARAMETER="LAST_ACT_ENTRY"/>
    <exporting PARAMETER="UCOMM"/>
    <exporting PARAMETER="UPDATE_REQUIRED"/>
    <tables PARAMETER="CORR_KEYTAB" DBSTRUCT="E071K"/>
    <tables PARAMETER="DBA_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="DPL_SELLIST" DBSTRUCT="VIMSELLIST"/>
    <tables PARAMETER="EXCL_CUA_FUNCT" DBSTRUCT="VIMEXCLFUN"/>
    <tables PARAMETER="EXTRACT"/>
    <tables PARAMETER="TOTAL"/>
    <tables PARAMETER="X_HEADER" DBSTRUCT="VIMDESC"/>
    <tables PARAMETER="X_NAMTAB" DBSTRUCT="VIMNAMTAB"/>
    <exceptions EXCEPTION="MISSING_CORR_NUMBER"/>
    <exceptions EXCEPTION="SAVING_CORRECTION_FAILED"/>
    <documentation PARAMETER="FCODE" KIND="P" STEXT="gewünschte Funktion des Bausteins" INDEX=" 001"/>
    <documentation PARAMETER="VIEW_ACTION" KIND="P" STEXT="Aktion mit Tabelle: anz./änd./transp. (S/U/T)" INDEX=" 002"/>
    <documentation PARAMETER="VIEW_NAME" KIND="P" STEXT="Name der Tabelle" INDEX=" 003"/>
    <documentation PARAMETER="CORR_NUMBER" KIND="P" STEXT="Korrekturnummer für durchgeführte Änderungen" INDEX=" 004"/>
    <documentation PARAMETER="LAST_ACT_ENTRY" KIND="P" STEXT="Index der Cursorposition in der Anzeigetabelle" INDEX=" 005"/>
    <documentation PARAMETER="UCOMM" KIND="P" STEXT="letztes User-command innerhalb der Viewpflege" INDEX=" 006"/>
    <documentation PARAMETER="UPDATE_REQUIRED" KIND="P" STEXT="Flag: Einträge verändert, Sichern erforderlich" INDEX=" 007"/>
    <documentation PARAMETER="CORR_KEYTAB" KIND="P" STEXT="Tabelle mit den Keys der zu transport. Einträge" INDEX=" 008"/>
    <documentation PARAMETER="DBA_SELLIST" KIND="P" STEXT="Selektionsbedingungen für den DB-Zugriff" INDEX=" 009"/>
    <documentation PARAMETER="DPL_SELLIST" KIND="P" STEXT="Selektionsbedingungen für die Anzeige" INDEX=" 010"/>
    <documentation PARAMETER="EXCL_CUA_FUNCT" KIND="P" STEXT="Tab. der nicht zu aktivierenden CUA-Funktionen" INDEX=" 011"/>
    <documentation PARAMETER="EXTRACT" KIND="P" STEXT="Tab. der gerade sichtbaren Daten (Anzeigetabelle" INDEX=" 012"/>
    <documentation PARAMETER="TOTAL" KIND="P" STEXT="Tabelle, mit allen von der DB gelesenen Daten" INDEX=" 013"/>
    <documentation PARAMETER="X_HEADER" KIND="P" STEXT="Kontrollblocktabelle für die Tabelle" INDEX=" 014"/>
    <documentation PARAMETER="X_NAMTAB" KIND="P" STEXT="Kontrollblocktabelle für die Tabellen-Felder" INDEX=" 015"/>
    <documentation PARAMETER="MISSING_CORR_NUMBER" KIND="X" STEXT="Korrekturnummer fehlt" INDEX=" 016"/>
    <documentation PARAMETER="SAVING_CORRECTION_FAILED" KIND="X" STEXT="Fehler beim Sichern der Korrektureinträge" INDEX=" 017"/>
    <fm_source>*---------------------------------------------------------------------*
*    program for:   TABLEPROC_ZBCFG0002
*   generation date: 10.08.2014 at 13:53:13 by user SOTOS
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*

  PERFORM TABLEPROC.</fm_source>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="ZBCPRR0002" VARCL="X" SUBC="1" APPL="S" RMAND="200" RLOAD="S" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="B01" ENTRY="Data Source" LENGTH="19 "/>
    <textElement ID="I" KEY="B02" ENTRY="Selection Screen" LENGTH="18 "/>
    <textElement ID="I" KEY="B03" ENTRY="Aditional parameters" LENGTH="22 "/>
    <textElement ID="I" KEY="T01" ENTRY="Choose a file" LENGTH="27 "/>
    <textElement ID="R" ENTRY="Programs what call SELECT SINGLE at indexes" LENGTH="70 "/>
    <textElement ID="S" KEY="RB_FILE" ENTRY="        File" LENGTH="15 "/>
    <textElement ID="S" KEY="RB_INPUT" ENTRY="        Manual input" LENGTH="22 "/>
    <textElement ID="S" KEY="P_FILE" ENTRY="D       ." LENGTH="15 "/>
    <textElement ID="S" KEY="S_DVCLAS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FROM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_OBJECT" ENTRY="D       ." LENGTH="19 "/>
   </language>
   <language SPRAS="S">
    <textElement ID="I" KEY="B01" ENTRY="Origen de los datos" LENGTH="19 "/>
    <textElement ID="I" KEY="B02" ENTRY="Selección de datos" LENGTH="18 "/>
    <textElement ID="I" KEY="B03" ENTRY="Parámetros adicionales" LENGTH="22 "/>
    <textElement ID="I" KEY="T01" ENTRY="Elija el archivo a procesar" LENGTH="27 "/>
    <textElement ID="R" ENTRY="Programas que usan índices con SELECT SINGLE" LENGTH="44 "/>
    <textElement ID="S" KEY="P_FILE" ENTRY="D       ." LENGTH="15 "/>
    <textElement ID="S" KEY="RB_FILE" ENTRY="        Archivo" LENGTH="15 "/>
    <textElement ID="S" KEY="RB_INPUT" ENTRY="        Ingreso manual" LENGTH="22 "/>
    <textElement ID="S" KEY="S_DVCLAS" ENTRY="D       ." LENGTH="9 "/>
    <textElement ID="S" KEY="S_FROM" ENTRY="D       ." LENGTH="24 "/>
    <textElement ID="S" KEY="S_OBJECT" ENTRY="D       ." LENGTH="19 "/>
   </language>
  </textPool>
  <source>*----------------------------------------------------------------------*
* Proy/Inc:     Upgrade Oracle
* Funcional:    Juan Sebastián Soto
* Técnico:      Juan Sebastián Soto
* Fecha:        07.08.2014
* Descripción:  Este programa toma un listado de objetos y los analiza
*               en búsqueda de consumo de índices secundarios con la
*               utilización de la sentencia SELECT SINGLE
* Empresa:      Atos
*----------------------------------------------------------------------*


REPORT  zbcprr0002.

INCLUDE zbcprr0002_top.
INCLUDE zbcprr0002_sel.
INCLUDE zbcprr0002_f01.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  PERFORM f4_screen_file.

AT SELECTION-SCREEN.

  CASE abap_true.
    WHEN rb_file.
      CHECK p_file IS INITIAL.
      SET CURSOR FIELD &apos;P_FILE&apos;.
      MESSAGE e197(ist_ebs).
*   No se han fijado los parámetros obligatorios
    WHEN rb_input.
      CHECK s_dvclas IS INITIAL.
      SET CURSOR FIELD &apos;S_DVCLAS-LOW&apos;.
      MESSAGE e197(ist_ebs).
*   No se han fijado los parámetros obligatorios
  ENDCASE.

START-OF-SELECTION.

  CASE abap_true.
    WHEN rb_file.
      PERFORM start_from_file.
    WHEN rb_input.
      PERFORM start_from_input.
  ENDCASE.

  PERFORM read_source_code.
  PERFORM read_tables_design.
  PERFORM read_access_where.
  PERFORM save_result_in_table.
  PERFORM show_log.</source>
 </PROG>
 <PROG NAME="ZBCPRR0002_TOP" VARCL="X" SUBC="I" APPL="S" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Declaraciones globales del programa ZBCPRR0002" LENGTH="46 "/>
   </language>
  </textPool>
  <source>CONSTANTS: c_method_splitter TYPE c LENGTH 3 VALUE &apos;==&gt;&apos;.

TYPE-POOLS: abap.

TYPES: BEGIN OF ty_screen,
         exdat     TYPE exdat,
         object    TYPE tadir-object,
         devclass  TYPE tadir-devclass,
       END OF ty_screen,
       BEGIN OF ty_tadir,
         pgmid    TYPE tadir-pgmid,
         object   TYPE tadir-object,
         obj_name TYPE tadir-obj_name,
         delflag  TYPE tadir-delflag,
       END OF ty_tadir,
       BEGIN OF ty_dictionary_status,
         status_key   TYPE zbcde0011, &quot; F = Full Key ; P = Parcial continues ; N = Not used
         status_idx   TYPE zbcde0011, &quot; F = Full Key ; P = Parcial continues ; N = Not used
         indexname    TYPE zbctm0001-indexname,
       END OF ty_dictionary_status.

TYPES: ty_t_tadir TYPE STANDARD TABLE OF ty_tadir.

DATA: t_objects       TYPE zbctt0006,
      t_messages      TYPE bapiret2_t,
      t_table_design  TYPE zbctt0007,
      t_zbctm0000     TYPE HASHED TABLE OF zbctm0000 WITH UNIQUE KEY obj_name id_ejection,
      t_zbctm0001     TYPE HASHED TABLE OF zbctm0001 WITH UNIQUE DEFAULT KEY.

DATA: w_screen TYPE ty_screen.

DATA: v_id_ejecution TYPE zbctm0000-id_ejection.</source>
 </PROG>
 <PROG NAME="ZBCPRR0002_SEL" VARCL="X" SUBC="I" APPL="S" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Pantalla de selección del programa ZBCPRR0002" LENGTH="45 "/>
   </language>
  </textPool>
  <source>SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
PARAMETERS: rb_file  RADIOBUTTON GROUP src,
            rb_input RADIOBUTTON GROUP src DEFAULT &apos;X&apos;.
SELECTION-SCREEN END OF BLOCK b01.

SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-b02.
PARAMETERS:     p_file   TYPE zbcde0008 LOWER CASE.
SELECT-OPTIONS: s_dvclas FOR w_screen-devclass NO INTERVALS NO-EXTENSION,
                s_object FOR w_screen-object.
SELECTION-SCREEN END OF BLOCK b02.

SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE text-b03.
SELECT-OPTIONS: s_from   FOR w_screen-exdat.
SELECTION-SCREEN END OF BLOCK b03.</source>
 </PROG>
 <PROG NAME="ZBCPRR0002_F01" VARCL="X" SUBC="I" APPL="S" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Subrutinas del programa ZBCPRR0002" LENGTH="34 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;      Form  F4_SCREEN_FILE
*&amp;---------------------------------------------------------------------*
*  P_FILE Parameter Match Code
*----------------------------------------------------------------------*
FORM f4_screen_file.

  DATA: tl_file_table TYPE filetable.

  DATA: wl_file LIKE LINE OF tl_file_table.

  DATA: vl_rc           TYPE i,
        vl_window_title TYPE string,
        vl_user_action  TYPE i.

  vl_window_title = text-t01.

  CALL METHOD cl_gui_frontend_services=&gt;file_open_dialog
    EXPORTING
      window_title            = vl_window_title
    CHANGING
      file_table              = tl_file_table
      rc                      = vl_rc
      user_action             = vl_user_action
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CHECK vl_user_action EQ 0.
  CHECK vl_rc NE &apos;-1&apos;.

  READ TABLE tl_file_table INTO wl_file INDEX 1.
  p_file = wl_file-filename.


ENDFORM.                    &quot; F4_SCREEN_FILE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  start_from_file
*&amp;---------------------------------------------------------------------*
*  Fill T_OBJECTS table from the input file
*----------------------------------------------------------------------*
FORM start_from_file.

* SS001 Read the input file.
  PERFORM read_file.

* SS001 Fill the object properties to know the method to read the source code.
  PERFORM fill_object_properties.

ENDFORM.                    &quot;start_from_file

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_FILE
*&amp;---------------------------------------------------------------------*
*  Read input file with the object list
*----------------------------------------------------------------------*
FORM read_file.

  DATA: tl_file_content TYPE stringtab.

  DATA: wl_object TYPE LINE OF zbctt0006.

  DATA: vl_content TYPE string.

  CALL METHOD cl_gui_frontend_services=&gt;gui_upload
    EXPORTING
      filename                = p_file
    CHANGING
      data_tab                = tl_file_content
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* SS001 Fill the object list with the file content.
  LOOP AT tl_file_content INTO vl_content.
    CLEAR wl_object.
    wl_object-obj_name = vl_content.
    APPEND wl_object TO t_objects.
  ENDLOOP.

  SORT t_objects BY obj_name.
  DELETE ADJACENT DUPLICATES FROM t_objects COMPARING obj_name.

ENDFORM.                    &quot; READ_FILE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FILL_OBJECT_PROPERTIES
*&amp;---------------------------------------------------------------------*
* Fill the object properties to know the method to read the source code
*----------------------------------------------------------------------*
FORM fill_object_properties.

  DATA: tl_tadir   TYPE SORTED TABLE OF ty_tadir WITH UNIQUE KEY obj_name.

  DATA: wl_tadir   TYPE ty_tadir,
        wl_objects TYPE zbces0006.

  FIELD-SYMBOLS: &lt;fsl_objects&gt; TYPE LINE OF zbctt0006.

  CHECK t_objects IS NOT INITIAL.

  LOOP AT t_objects INTO wl_objects.
    CLEAR wl_tadir.
    wl_tadir-obj_name = wl_objects-obj_name(40).
    APPEND wl_tadir TO tl_tadir.
  ENDLOOP.

* SS001 Read the object type from the object name data (Function Modulo is not found here)
  SELECT pgmid object obj_name delflag
  FROM tadir
  INTO TABLE tl_tadir
  FOR ALL ENTRIES IN tl_tadir
  WHERE obj_name EQ tl_tadir-obj_name.

  CHECK sy-subrc EQ 0.

* SS001 Update the object type in the general table
  LOOP AT t_objects ASSIGNING &lt;fsl_objects&gt;.
    wl_tadir-obj_name = &lt;fsl_objects&gt;-obj_name.
    READ TABLE tl_tadir
    INTO wl_tadir
    WITH KEY obj_name = wl_tadir-obj_name.
    IF sy-subrc EQ 0.
      &lt;fsl_objects&gt;-pgmid  = wl_tadir-pgmid.
      &lt;fsl_objects&gt;-object = wl_tadir-object.
    ELSE.
      &lt;fsl_objects&gt;-pgmid  = &apos;R3TR&apos;.
      &lt;fsl_objects&gt;-object = &apos;FUNC&apos;.
    ENDIF.
  ENDLOOP.

ENDFORM.                    &quot; FILL_OBJECT_PROPERTIES

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
* Read the source code of the objects
*----------------------------------------------------------------------*
FORM read_source_code.

  DATA: ol_exception TYPE REF TO zcx_bapiret2.

  DATA: tl_source    TYPE rsfb_source.

  DATA: wl_message   TYPE bapiret2.

  FIELD-SYMBOLS: &lt;fsl_objects&gt; TYPE LINE OF zbctt0006.

  LOOP AT t_objects ASSIGNING &lt;fsl_objects&gt;.

    TRY.

* SS001 Read the source code of the object. Programs and Function Module have diferent methods
        CASE &lt;fsl_objects&gt;-object.
          WHEN &apos;PROG&apos;.
            PERFORM read_program_source_code USING &lt;fsl_objects&gt;-obj_name
                                          CHANGING tl_source.
          WHEN &apos;FUNC&apos;.
            PERFORM read_funcion_source_code USING &lt;fsl_objects&gt;-obj_name
                                          CHANGING tl_source.
          WHEN &apos;METH&apos;.
            PERFORM read_method_source_code  USING &lt;fsl_objects&gt;-obj_name
                                          CHANGING tl_source.
        ENDCASE.

* SS001 Replace commented lines and dead code
        PERFORM remove_comments CHANGING tl_source.

* SS001 Extract only the SELECT SINGLE statements of the source code
        PERFORM cut_source_code USING &lt;fsl_objects&gt;-object
                                      &lt;fsl_objects&gt;-obj_name
                                      tl_source
                             CHANGING &lt;fsl_objects&gt;-zresult.

      CATCH zcx_bapiret2 INTO ol_exception.

* SS001 Save the exception message in the log
        CALL METHOD ol_exception-&gt;get_message
          RECEIVING
            re_message = wl_message.

        APPEND wl_message TO t_messages.

    ENDTRY.

  ENDLOOP.

  DELETE t_objects WHERE zresult IS INITIAL.

ENDFORM.                    &quot; READ_SOURCE_CODE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_PROGRAM_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
*  Read the Program (Main or Include) source code
*----------------------------------------------------------------------*
*      --&gt;PV_OBJECT  Name of the object (Program or Include)
*      &lt;--PT_SOURCE  Source Code
*----------------------------------------------------------------------*
FORM read_program_source_code  USING pv_object TYPE zbces0006-obj_name
                            CHANGING pt_source TYPE rsfb_source
                             RAISING zcx_bapiret2.

  DATA: wl_message TYPE bapiret2.

  READ REPORT pv_object INTO pt_source.
  CHECK sy-subrc NE 0.

  wl_message-type       = &apos;W&apos;.
  wl_message-id         = &apos;DS&apos;.
  wl_message-number     = 017.
  wl_message-message_v1 = pv_object.

  RAISE EXCEPTION TYPE zcx_bapiret2
  EXPORTING
    message = wl_message.

ENDFORM.                    &quot; READ_PROGRAM_SOURCE_CODE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_FUNCION_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
*  Read the Function Module source code
*----------------------------------------------------------------------*
*      --&gt;PV_OBJECT  Name of the object (Program or Include)
*      &lt;--PT_SOURCE  Source Code
*----------------------------------------------------------------------*
FORM read_funcion_source_code  USING pv_object TYPE zbces0006-obj_name
                            CHANGING pt_source TYPE rsfb_source
                             RAISING zcx_bapiret2.

  DATA: tl_import_parameter   TYPE STANDARD TABLE OF rsimp,
        tl_changing_parameter TYPE STANDARD TABLE OF rscha,
        tl_export_parameter   TYPE STANDARD TABLE OF rsexp,
        tl_tables_parameter   TYPE STANDARD TABLE OF rstbl,
        tl_exception_list     TYPE STANDARD TABLE OF rsexc,
        tl_documentation      TYPE STANDARD TABLE OF rsfdo,
        tl_source             TYPE STANDARD TABLE OF rssource.

  DATA: wl_message TYPE bapiret2.

  DATA: vl_function TYPE rs38l-name.

  CLEAR pt_source.

  vl_function = pv_object.

  CALL FUNCTION &apos;RPY_FUNCTIONMODULE_READ_NEW&apos;
    EXPORTING
      functionname       = vl_function
    TABLES
      import_parameter   = tl_import_parameter
      changing_parameter = tl_changing_parameter
      export_parameter   = tl_export_parameter
      tables_parameter   = tl_tables_parameter
      exception_list     = tl_exception_list
      documentation      = tl_documentation
      SOURCE             = tl_source
    CHANGING
      new_source         = pt_source
    EXCEPTIONS
      error_message      = 1
      function_not_found = 2
      invalid_name       = 3
      OTHERS             = 4.

  IF sy-subrc NE 0.

    wl_message-type       = &apos;W&apos;.
    wl_message-id         = sy-msgid.
    wl_message-number     = sy-msgno.
    wl_message-message_v1 = sy-msgv1.
    wl_message-message_v2 = sy-msgv2.
    wl_message-message_v3 = sy-msgv3.
    wl_message-message_v4 = sy-msgv4.

    RAISE EXCEPTION TYPE zcx_bapiret2
    EXPORTING
      message = wl_message.

  ENDIF.

  IF pt_source IS INITIAL.
    pt_source = tl_source.
  ENDIF.

  CHECK sy-subrc NE 0.

  wl_message-type       = &apos;W&apos;.
  wl_message-id         = sy-msgid.
  wl_message-number     = sy-msgno.
  wl_message-message_v1 = sy-msgv1.
  wl_message-message_v2 = sy-msgv2.
  wl_message-message_v3 = sy-msgv3.
  wl_message-message_v4 = sy-msgv4.

  RAISE EXCEPTION TYPE zcx_bapiret2
  EXPORTING
    message = wl_message.

ENDFORM.                    &quot; READ_FUNCION_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CUT_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
*  Keep the SELECT SINGLE matchs of the source code
*----------------------------------------------------------------------*
*      --&gt;PV_OBJECT    Name of the object (Program or Include)
*      --&gt;PV_OBJ_NAME  Name of the object (Program or Include)
*      &lt;--PT_SOURCE    Source Code
*      &lt;--PT_DBMATCHES Name of the database table and the source code line
*----------------------------------------------------------------------*
FORM cut_source_code  USING pv_object    TYPE zbces0006-object
                            pv_obj_name  TYPE zbces0006-obj_name
                            pt_source    TYPE rsfb_source
                   CHANGING pt_zresult   TYPE zbces0006-zresult
                    RAISING zcx_bapiret2.

  DATA: tl_select_single_results TYPE match_result_tab.

  DATA: wl_zresult       TYPE LINE OF zbctt0008,
        wl_source        TYPE LINE OF rsfb_source,
        wl_select_single TYPE LINE OF match_result_tab,
        wl_message       TYPE bapiret2.

* SS001 Find the SELECT SINGLE statements
  FIND ALL OCCURRENCES OF &apos;SELECT SINGLE&apos; IN TABLE pt_source RESULTS tl_select_single_results.

  LOOP AT tl_select_single_results INTO wl_select_single.

    wl_zresult-line = wl_select_single-line.

* SS001 Extract the SELECT SINGLE statement
    LOOP AT pt_source INTO wl_source FROM wl_select_single-line.

      CONDENSE wl_source.

      CONCATENATE wl_zresult-sentence wl_source INTO wl_zresult-sentence SEPARATED BY space.

      FIND FIRST OCCURRENCE OF &apos;.&apos; IN wl_source IN CHARACTER MODE. &quot; Find the end of the statement
      CHECK sy-subrc EQ 0.

      SET LOCALE LANGUAGE &apos;E&apos;. &quot; Set language at English... Programming without ñ...
      TRANSLATE wl_zresult-sentence TO UPPER CASE.
      CONDENSE wl_zresult-sentence.

      PERFORM extract_select_information USING wl_zresult-sentence
                                      CHANGING wl_zresult-dbmatches.

      APPEND wl_zresult TO pt_zresult.
      CLEAR wl_zresult.

      EXIT. &quot; At found the end of the statement exit the in loop.
    ENDLOOP.

  ENDLOOP.

  CHECK pt_zresult IS INITIAL.

  wl_message-type       = &apos;S&apos;.
  wl_message-id         = &apos;Z2&apos;.
  wl_message-message_v1 = &apos;SELECT SINGLE&apos;.
  wl_message-message_v2 = pv_obj_name.

  CASE pv_object.
    WHEN &apos;PROG&apos;.
      wl_message-number     = 115.
    WHEN &apos;FUNC&apos;.
      wl_message-number     = 116.
    WHEN &apos;METH&apos;.
      wl_message-number     = 117.
      SPLIT pv_obj_name AT c_method_splitter INTO wl_message-message_v3 wl_message-message_v2.
  ENDCASE.

  RAISE EXCEPTION TYPE zcx_bapiret2
  EXPORTING
    message = wl_message.

ENDFORM.                    &quot; CUT_SOURCE_CODE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  EXTRACT_SELECT_INFORMATION
*&amp;---------------------------------------------------------------------*
*  Extracte the table/s name and WHERE fieldnames from one SELECT statement
*----------------------------------------------------------------------*
*      --&gt;PV_SOURCE_LINE  Source line with the statement
*      --&gt;PT_SOURCE       Source Code
*      &lt;--PT_DBMATCHES    Data Base tables or Views matches
*----------------------------------------------------------------------*
FORM extract_select_information  USING pv_source       TYPE string
                              CHANGING pt_dbmatches    TYPE zbces0008-dbmatches.

  DATA: tl_split      TYPE stringtab,
        tl_view_join  TYPE dd27p_tty.

  DATA: wl_dbmatches  TYPE LINE OF zbces0008-dbmatches,
        wl_view_join  TYPE dd27p.

  DATA: vl_split              TYPE string,
        vl_where_table_name   TYPE string,
        vl_garbage            TYPE string,
        vl_fieldname          TYPE fieldname,
        vl_table_tabix        TYPE i,
        vl_alias_tabix        TYPE i,
        vl_where_tabix        TYPE i,
        vl_tabclass           TYPE dd02l-tabclass.

  SPLIT pv_source AT space INTO TABLE tl_split IN CHARACTER MODE.

  LOOP AT tl_split INTO vl_split WHERE table_line EQ &apos;FROM&apos;
                                    OR table_line EQ &apos;JOIN&apos;.

    CLEAR wl_dbmatches.

* Get the table name
    vl_table_tabix = sy-tabix + 1.
    READ TABLE tl_split
    INTO vl_split
    INDEX vl_table_tabix.
    wl_dbmatches-tabname = vl_split.
    vl_where_table_name = vl_split.

    PERFORM get_table_class  USING vl_where_table_name
                          CHANGING vl_tabclass.
    CASE vl_tabclass.
      WHEN &apos;CLUSTER&apos; OR &apos;POOL&apos;.
        CONTINUE.
      WHEN &apos;VIEW&apos;.
        PERFORM get_view_join USING vl_where_table_name
                           CHANGING tl_view_join.
    ENDCASE.

* Check if have alias
    vl_alias_tabix = vl_table_tabix + 1.
    READ TABLE tl_split
    INTO vl_split
    INDEX vl_alias_tabix.
    IF vl_split EQ &apos;AS&apos;.
* Get the alias name for the WHERE
      vl_alias_tabix = vl_table_tabix + 2.
      READ TABLE tl_split
      INTO vl_split
      INDEX vl_alias_tabix.

      vl_where_table_name = vl_split. &quot; Replace the original name cause are using an alias
    ENDIF.

    READ TABLE tl_split
    INTO vl_split
    WITH KEY table_line = &apos;WHERE&apos;.
    CHECK sy-subrc EQ 0. &quot; It is not obligatory the WHERE

    vl_where_tabix = sy-tabix + 1.

    WHILE sy-subrc EQ 0.

      READ TABLE tl_split
      INTO vl_split
      INDEX vl_where_tabix.
      CHECK sy-subrc EQ 0.

      vl_where_tabix = vl_where_tabix + 4.

      FIND FIRST OCCURRENCE OF &apos;~&apos; IN vl_split.
      IF sy-subrc EQ 0.
        SPLIT vl_split AT &apos;~&apos; INTO vl_garbage vl_fieldname.
      ELSE.
        vl_fieldname = vl_split.
        vl_garbage   = vl_where_table_name.
      ENDIF.

      sy-subrc = 0.

      IF vl_where_table_name NE vl_garbage. &quot; If the alias name it isn&apos;t equal at the WHERE line, skip. But if the name it&apos;s the same, the name of the field is stored in VL_FIELDNAME
        CONTINUE.
      ENDIF.

      READ TABLE tl_view_join
      INTO wl_view_join
      WITH KEY viewfield = vl_fieldname.
      IF sy-subrc EQ 0.
        vl_fieldname         = wl_view_join-fieldname.
        wl_dbmatches-tabname = wl_view_join-tabname.
      ENDIF.

      APPEND vl_fieldname TO wl_dbmatches-fieldname.

    ENDWHILE.

    CHECK wl_dbmatches-fieldname IS NOT INITIAL.
    INSERT wl_dbmatches INTO TABLE pt_dbmatches.

  ENDLOOP.

ENDFORM.                    &quot; EXTRACT_SELECT_INFORMATION

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SHOW_LOG
*&amp;---------------------------------------------------------------------*
*  Save and show the log
*----------------------------------------------------------------------*
FORM show_log.

  DATA: ol_log     TYPE REF TO zcl_log_message.

  DATA: tl_log     TYPE rsaos_t_message.

  CREATE OBJECT ol_log
    EXPORTING
      OBJECT          = &apos;ZBC_ABAP_SCANNER&apos;
      subobject       = &apos;SELECT_SINGLE&apos;
      aluser          = sy-uname
      altcode         = sy-tcode
      alprog          = sy-repid
      del_before      = abap_false
    EXCEPTIONS
      log_not_created = 1
      OTHERS          = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  tl_log = zcl_log_message=&gt;convert_message( im_input  = t_messages ).

  CALL METHOD ol_log-&gt;add_messages
    EXPORTING
      t_messages       = tl_log
    EXCEPTIONS
      log_not_found    = 1
      msg_inconsistent = 2
      log_is_full      = 3
      OTHERS           = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL METHOD ol_log-&gt;save_log
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CHECK sy-batch IS INITIAL.

  CALL METHOD ol_log-&gt;display_log
    EXCEPTIONS
      profile_inconsistent = 1
      internal_error       = 2
      no_data_available    = 3
      no_authority         = 4
      OTHERS               = 5.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.


ENDFORM.                    &quot; SHOW_LOG

*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_TABLES_DESIGN
*&amp;---------------------------------------------------------------------*
* Read the table design including the indexes design
*----------------------------------------------------------------------*
FORM read_tables_design.

  DATA: wl_object       TYPE LINE OF zbctt0006,
        wl_dbmatches    TYPE LINE OF zbctt0005,
        wl_table_design TYPE LINE OF zbctt0007,
        wl_zresult      TYPE LINE OF zbctt0008.

  LOOP AT t_objects INTO wl_object.

    LOOP AT wl_object-zresult INTO wl_zresult.

      LOOP AT wl_zresult-dbmatches INTO wl_dbmatches.

        READ TABLE t_table_design WITH TABLE KEY tabname = wl_dbmatches-tabname TRANSPORTING NO FIELDS.
        CHECK sy-subrc NE 0.
        CLEAR wl_table_design.
        wl_table_design-tabname = wl_dbmatches-tabname.

        CLEAR wl_table_design-dd17v.

        CALL FUNCTION &apos;DDIF_TABL_GET&apos;
          EXPORTING
            name          = wl_table_design-tabname
          TABLES
            dd03p_tab     = wl_table_design-dd03p
            dd12v_tab     = wl_table_design-dd12v
            dd17v_tab     = wl_table_design-dd17v
          EXCEPTIONS
            illegal_input = 1
            OTHERS        = 2.

        IF sy-subrc &lt;&gt; 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

* Exclude the table if this do not have indexes
        CHECK wl_table_design-dd17v IS NOT INITIAL.

* Exclude the not key fields and MANDT fields
        DELETE wl_table_design-dd03p WHERE keyflag EQ abap_false.
        DELETE wl_table_design-dd03p WHERE fieldname EQ &apos;MANDT&apos;.
        DELETE wl_table_design-dd17v WHERE fieldname EQ &apos;MANDT&apos;.

        INSERT wl_table_design INTO TABLE t_table_design.

      ENDLOOP.

    ENDLOOP.

  ENDLOOP.

ENDFORM.                    &quot; READ_TABLES_DESIGN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  DISCARD_SQL_ACCESS
*&amp;---------------------------------------------------------------------*
*  Analize the WHERE access with the primary key and the indexes and
*  and discard the access that use de primary key o do not use an index
*----------------------------------------------------------------------*
FORM read_access_where.

  DATA: wl_object       TYPE LINE OF zbctt0006,
        wl_zresult      TYPE LINE OF zbctt0008,
        wl_dbmatches    TYPE LINE OF zbctt0005,
        wl_tabledesign  TYPE LINE OF zbctt0007,
        wl_status       TYPE ty_dictionary_status.

  LOOP AT t_objects INTO wl_object.
    LOOP AT wl_object-zresult INTO wl_zresult.
      LOOP AT wl_zresult-dbmatches INTO wl_dbmatches.

        CLEAR wl_status.

* SS001 Access to the table design (Primary Key and Indexes Design)
        READ TABLE t_table_design
        INTO wl_tabledesign
        WITH TABLE KEY tabname = wl_dbmatches-tabname.
        CHECK sy-subrc EQ 0.

        PERFORM check_primary_key USING wl_dbmatches-fieldname
                                        wl_tabledesign-dd03p
                               CHANGING wl_status-status_key.

        CHECK wl_status-status_key NE &apos;F&apos;. &quot; Continue if the Primary Key is not full used

        PERFORM check_index USING wl_dbmatches-fieldname
                                  wl_tabledesign-dd12v
                                  wl_tabledesign-dd17v
                         CHANGING wl_status-status_idx
                                  wl_status-indexname.

        CHECK wl_status-status_idx NE &apos;N&apos;.

        PERFORM fill_result_table USING wl_object-obj_name
                                        wl_dbmatches-tabname
                                        wl_status-indexname
                                        wl_zresult-line.

      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    &quot; READ_ACCESS_WHERE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_PRIMARY_KEY
*&amp;---------------------------------------------------------------------*
*  Check if this access will be use the primary key
*----------------------------------------------------------------------*
*      --&gt;PT_USED_FIELDS   Table name with key WHERE fields used
*      --&gt;PT_PRIMARY_KEY   Table primary key design of the table to check
*      &lt;--PV_STATUS        Status of use. See _TOP declarations for help
*----------------------------------------------------------------------*
FORM check_primary_key  USING    pt_used_fiels    TYPE zbces0005-fieldname
                                 pt_primary_key   TYPE zbces0007-dd03p
                        CHANGING pv_status        TYPE ty_dictionary_status-status_key.

  DATA: ol_verificator TYPE REF TO data.

  DATA: tl_results     TYPE match_result_tab.

  DATA: wl_primary_key TYPE dd03p.

  DATA: vl_field_tabix  TYPE sy-tabix,
        vl_count_key    TYPE i.

  FIELD-SYMBOLS: &lt;fsl_verificator&gt; TYPE ANY. &quot; Verification variable. Each field mark the status of use of one field

  vl_count_key = LINES( pt_primary_key ).

  CREATE DATA ol_verificator TYPE c LENGTH vl_count_key. &quot; Create a dynamic variable with the length of the table key
  ASSIGN ol_verificator-&gt;* TO &lt;fsl_verificator&gt;.

  LOOP AT pt_primary_key INTO wl_primary_key.

    vl_field_tabix = sy-tabix - 1.

    READ TABLE pt_used_fiels
    WITH KEY table_line = wl_primary_key-fieldname
    TRANSPORTING NO FIELDS.
    CHECK sy-subrc EQ 0.

    &lt;fsl_verificator&gt;+vl_field_tabix(1) = abap_on. &quot;Mark the key field used

  ENDLOOP.

  FIND ALL OCCURRENCES OF abap_on IN &lt;fsl_verificator&gt; RESULTS tl_results.

  PERFORM check_usability USING tl_results
                                vl_count_key
                       CHANGING pv_status.

ENDFORM.                    &quot; CHECK_PRIMARY_KEY

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_TABLE_CLASS
*&amp;---------------------------------------------------------------------*
*  Get the class table ( TRANSP, CLUSTER, POOL, VIEW )
*----------------------------------------------------------------------*
*      --&gt;PV_TABLENAME     Name of table
*      &lt;--PV_TABLE_CLASS   Class of table
*----------------------------------------------------------------------*
FORM get_table_class  USING pv_tablename    TYPE string
                   CHANGING pv_table_class  TYPE dd02l-tabclass.

  DATA: vl_tablename TYPE dd02l-tabname.

  vl_tablename = pv_tablename.

  SELECT SINGLE tabclass
  FROM dd02l
  INTO pv_table_class
  WHERE tabname  EQ vl_tablename
    AND as4local EQ &apos;A&apos; &quot; The Active Version
    AND as4vers  EQ 0000.

ENDFORM.                    &quot; GET_TABLE_CLASS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_INDEX
*&amp;---------------------------------------------------------------------*
*  Check if an index is used and put the index name
*----------------------------------------------------------------------*
*      --&gt;PT_USED_FIELDS   Table name with key WHERE fields used
*      --&gt;PT_INDEXES       Table primary key design of the table to check
*      &lt;--PV_STATUS        Status of use. See _TOP declarations for help
*      &lt;--PV_INDEXNAME     Name of the used index
*----------------------------------------------------------------------*
FORM check_index  USING    pt_used_fields    TYPE zbces0005-fieldname
                           pt_indexes        TYPE zbces0007-dd12v
                           pt_indexes_format TYPE zbces0007-dd17v
                  CHANGING pv_status         TYPE ty_dictionary_status-status_idx
                           pv_indexname      TYPE zbctm0001-indexname.

  DATA: ol_verificator TYPE REF TO data.

  DATA: tl_results     TYPE match_result_tab.

  DATA: wl_index        TYPE dd12v,
        wl_index_format TYPE dd17v.

  DATA: vl_field_tabix  TYPE sy-tabix,
        vl_status       TYPE ty_dictionary_status-status_idx,
        vl_count_field  TYPE i.

  FIELD-SYMBOLS: &lt;fsl_verificator&gt; TYPE ANY. &quot; Verification variable. Each field mark the status of use of one field

  LOOP AT pt_indexes INTO wl_index.

    CLEAR vl_count_field.
    LOOP AT pt_indexes_format INTO wl_index_format WHERE indexname EQ wl_index-indexname.
      vl_count_field = vl_count_field + 1.
    ENDLOOP.

    CREATE DATA ol_verificator TYPE c LENGTH vl_count_field. &quot; Create a dynamic variable with the length of the index
    ASSIGN ol_verificator-&gt;* TO &lt;fsl_verificator&gt;.

    vl_field_tabix = -1.

    LOOP AT pt_indexes_format INTO wl_index_format WHERE indexname EQ wl_index-indexname.

      vl_field_tabix = vl_field_tabix + 1.

      READ TABLE pt_used_fields
      WITH KEY table_line = wl_index_format-fieldname
      TRANSPORTING NO FIELDS.
      CHECK sy-subrc EQ 0.

      &lt;fsl_verificator&gt;+vl_field_tabix(1) = abap_on. &quot;Mark the key field used

    ENDLOOP.

    FIND ALL OCCURRENCES OF abap_on IN &lt;fsl_verificator&gt; RESULTS tl_results.

    PERFORM check_usability USING tl_results
                                  vl_count_field
                         CHANGING vl_status.

    CASE vl_status.
      WHEN &apos;F&apos;. &quot; If an index is used at full, do not search more.
        pv_status    = vl_status.
        pv_indexname = wl_index-indexname.
        EXIT.
      WHEN &apos;P&apos;. &quot; Keep the index name proposed for use.
        pv_status    = vl_status.
        pv_indexname = wl_index-indexname.
      WHEN &apos;N&apos;.
        IF pv_status IS INITIAL. &quot; If a previus index is a proposed, do not leave it
          pv_status = vl_status.
        ENDIF.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    &quot; CHECK_INDEX
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_USABILITY
*&amp;---------------------------------------------------------------------*
* Check the use result algorithm for primary key or index
*----------------------------------------------------------------------*
*      --&gt;PT_RESULTS      Result of checks
*      --&gt;PV_COUNT_FIELD  Count fields used en the WHERE clause
*      &lt;--PV_STATUS
*----------------------------------------------------------------------*
FORM check_usability  USING    pt_results       TYPE match_result_tab
                               pv_count_field   TYPE i
                      CHANGING pv_status        TYPE zbcde0011.

  DATA: wl_result TYPE LINE OF match_result_tab.

  DATA: vl_field_used TYPE i.

* How to access with the primary key with a key of 3 fields
* XXX = Full Access
* XX0 = Partial Access
* X00 = Partial Access
* X0X = Not Access
* 0X0 = Not Access
* 000 = Not Access

* SS001 First check if the full key is used
  vl_field_used = LINES( pt_results ).
  IF vl_field_used EQ pv_count_field.
    pv_status = &apos;F&apos;. &quot; Primary Key full used!! Good boy, good boy :)
    EXIT.
  ENDIF.

* SS001 If have not &apos;X&apos; in the verification variable, no one primary key fields are used
  IF pt_results IS INITIAL.
    pv_status = &apos;N&apos;. &quot; Primary Key not used
    EXIT.
  ENDIF.

* SS001 If the first primary key field is not used, the primary key is not used
  READ TABLE pt_results
  INTO wl_result
  INDEX 1.
  IF wl_result-offset NE 0.
    pv_status = &apos;N&apos;. &quot; Primary Key not used
    EXIT.
  ENDIF.

  IF LINES( pt_results ) EQ 1.
    pv_status = &apos;P&apos;. &quot; Primary key used partialy
    EXIT.
  ENDIF.

* SS001 Check if the primary keys are used continues but not all
  LOOP AT pt_results INTO wl_result FROM 2.
    wl_result-offset = wl_result-offset + 1.
    CHECK wl_result-offset NE sy-tabix.
    pv_status = &apos;P&apos;. &quot; Primary key used partialy
    EXIT.
  ENDLOOP.

ENDFORM.                    &quot; CHECK_USABILITY

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FILL_RESULT_TABLE
*&amp;---------------------------------------------------------------------*
*  Fill the ZBCTM0000 &amp; ZBCTM0001 Internal Tables
*----------------------------------------------------------------------*
*      --&gt;PV_OBJ_NAME   Name of the object
*      --&gt;PV_TABNAME    Name of the table
*      --&gt;PV_INDEXNAME  Name of the index
*      --&gt;PV_LINE       ABAP line number where is the statement
*----------------------------------------------------------------------*
FORM fill_result_table  USING    pv_obj_name    TYPE zbces0006-obj_name
                                 pv_tabname     TYPE zbces0005-tabname
                                 pv_indexname   TYPE ty_dictionary_status-indexname
                                 pv_line        TYPE zbces0008-line.

  DATA: tl_zbctm0001_this_program TYPE HASHED TABLE OF zbctm0001 WITH UNIQUE DEFAULT KEY.

  DATA: wl_zbctm0000 TYPE zbctm0000,
        wl_zbctm0001 TYPE zbctm0001.

  IF v_id_ejecution IS INITIAL.
    CALL FUNCTION &apos;NUMBER_GET_NEXT&apos;
      EXPORTING
        nr_range_nr             = &apos;1&apos;
        object                  = &apos;Z_SEL_SING&apos;
      IMPORTING
        number                  = v_id_ejecution
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  READ TABLE t_zbctm0000
  INTO wl_zbctm0000
  WITH TABLE KEY obj_name    = pv_obj_name
                 id_ejection = v_id_ejecution.
  IF sy-subrc NE 0.

    wl_zbctm0000-obj_name     = pv_obj_name.
    wl_zbctm0000-id_ejection  = v_id_ejecution.
    wl_zbctm0000-adate        = sy-datum.
    wl_zbctm0000-atime        = sy-uzeit.
    wl_zbctm0000-auser        = sy-uname.
    INSERT wl_zbctm0000 INTO TABLE t_zbctm0000.

  ENDIF.

  wl_zbctm0001-obj_name     = wl_zbctm0000-obj_name.
  wl_zbctm0001-id_ejection  = wl_zbctm0000-id_ejection.
  wl_zbctm0001-tabname      = pv_tabname.
  wl_zbctm0001-line         = pv_line.
  wl_zbctm0001-indexname    = pv_indexname.

  INSERT LINES OF t_zbctm0001 INTO TABLE tl_zbctm0001_this_program.
  DELETE tl_zbctm0001_this_program WHERE obj_name NE pv_obj_name.
  wl_zbctm0001-counter      = LINES( tl_zbctm0001_this_program ) + 1.
  INSERT wl_zbctm0001 INTO TABLE t_zbctm0001.

ENDFORM.                    &quot; FILL_RESULT_TABLE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  REMOVE_COMMENTS
*&amp;---------------------------------------------------------------------*
*  Replace the comments with space
*----------------------------------------------------------------------*
*      &lt;--PT_SOURCE  Source Code
*----------------------------------------------------------------------*
FORM remove_comments  CHANGING pt_source TYPE rsfb_source.

  DATA: vl_comment_position TYPE i.

  FIELD-SYMBOLS: &lt;fsl_source&gt; TYPE LINE OF rsfb_source.

  LOOP AT pt_source ASSIGNING &lt;fsl_source&gt; WHERE table_line IS NOT INITIAL.

    FIND FIRST OCCURRENCE OF &apos;*&apos; IN &lt;fsl_source&gt; MATCH OFFSET vl_comment_position.
    IF  sy-subrc            EQ 0
    AND vl_comment_position EQ 0. &quot; Line commented with *
      CLEAR &lt;fsl_source&gt;.
      CONTINUE.
    ENDIF.

    FIND FIRST OCCURRENCE OF &apos;&quot;&apos; IN &lt;fsl_source&gt; MATCH OFFSET vl_comment_position.
    IF  sy-subrc EQ 0.
      &lt;fsl_source&gt; = &lt;fsl_source&gt;(vl_comment_position).
    ENDIF.

  ENDLOOP.

ENDFORM.                    &quot; REMOVE_COMMENTS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_VIEW_JOIN
*&amp;---------------------------------------------------------------------*
*  Get the View Join Table
*----------------------------------------------------------------------*
*      --&gt;PV_VIEW_NAME  Name of the view
*      &lt;--PT_VIEW_JOIN  Join Structure
*----------------------------------------------------------------------*
FORM get_view_join  USING    pv_view_name   TYPE string
                    CHANGING pt_view_join   TYPE dd27p_tty.

  DATA: vl_view_name TYPE ddobjname.

  vl_view_name = pv_view_name.

  CLEAR pt_view_join.

  CALL FUNCTION &apos;DDIF_VIEW_GET&apos;
    EXPORTING
      name          = vl_view_name
    TABLES
      dd27p_tab     = pt_view_join
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    &quot; GET_VIEW_JOIN

*&amp;---------------------------------------------------------------------*
*&amp;      Form  START_FROM_INPUT
*&amp;---------------------------------------------------------------------*
*  Start the process from Development Class
*----------------------------------------------------------------------*
FORM start_from_input.

* SS001 Get the object list
  PERFORM get_object_list.

ENDFORM.                    &quot; START_FROM_INPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_OBJECT_LIST
*&amp;---------------------------------------------------------------------*
*  Get the object list from a Development Class
*----------------------------------------------------------------------*
FORM get_object_list.

  TYPE-POOLS: suni.

  TYPES: BEGIN OF tyl_tfdir,
           funcname TYPE tfdir-funcname,
           pname    TYPE tfdir-pname,
         END OF tyl_tfdir.

  DATA: tl_tadir TYPE ty_t_tadir.

  DATA: wl_object TYPE LINE OF zbctt0006,
        wl_tadir  TYPE ty_tadir.

* SS001 Read the content of the Development Class
  SELECT pgmid object obj_name delflag
  FROM tadir
  INTO TABLE tl_tadir
  WHERE devclass IN s_dvclas
    AND object   IN s_object.

* SS001 Remove deleted objects
  DELETE tl_tadir WHERE delflag EQ abap_true.
  DELETE tl_tadir WHERE object  NE &apos;PROG&apos; AND object  NE &apos;FUGR&apos; AND object NE &apos;CLAS&apos;.

* SS001 Extract Function Modules and Subrutines includes from the Function Groups
  PERFORM break_down_function_group USING tl_tadir.

* SS001 Extract Methods from Classes
  PERFORM break_down_classes USING tl_tadir.

  DELETE tl_tadir WHERE object NE &apos;PROG&apos;.

  LOOP AT tl_tadir INTO wl_tadir.
    wl_object-pgmid    = wl_tadir-pgmid.
    wl_object-object   = wl_tadir-object.
    wl_object-obj_name = wl_tadir-obj_name.
    APPEND wl_object TO t_objects.
  ENDLOOP.

  SORT t_objects BY object obj_name.
  DELETE ADJACENT DUPLICATES FROM t_objects COMPARING object obj_name.

ENDFORM.                    &quot; GET_OBJECT_LIST

*&amp;---------------------------------------------------------------------*
*&amp;      Form  SAVE_RESULT_IN_TABLE
*&amp;---------------------------------------------------------------------*
* Save the result in the ZBCTM0000 &amp; ZBCTM0001 tables
*----------------------------------------------------------------------*
FORM save_result_in_table.

  INSERT zbctm0000 FROM TABLE t_zbctm0000.
  IF sy-subrc NE 0.
    ROLLBACK WORK.
    EXIT.
  ENDIF.

  INSERT zbctm0001 FROM TABLE t_zbctm0001.
  IF sy-subrc NE 0.
    ROLLBACK WORK.
    EXIT.
  ENDIF.

  COMMIT WORK AND WAIT.

ENDFORM.                    &quot; SAVE_RESULT_IN_TABLE

*&amp;---------------------------------------------------------------------*
*&amp;      Form  BREAK_DOWN_FUNCTION_GROUP
*&amp;---------------------------------------------------------------------*
* Extract Function Modules and Subrutines includes from the Function Groups
*----------------------------------------------------------------------*
*      --&gt;PT_TADIR  Object List
*----------------------------------------------------------------------*
FORM break_down_function_group  USING pt_tadir TYPE ty_t_tadir.

  DATA: tl_func  TYPE STANDARD TABLE OF suni_funcstruc,
        tl_tadir TYPE ty_t_tadir.

  DATA: wl_tadir  TYPE ty_tadir,
        wl_func   TYPE suni_funcstruc,
        wl_object TYPE LINE OF zbctt0006.

  DATA: vl_group      TYPE rs38l-area,
        vl_incl_numb  TYPE c LENGTH 2.

  tl_tadir = pt_tadir.
  DELETE tl_tadir WHERE object NE &apos;FUGR&apos;.

* SS001 By each Function Group, get the Function Modules and the Function Group includes
  LOOP AT tl_tadir INTO wl_tadir.

    vl_group = wl_tadir-obj_name.

    CLEAR tl_func.
    CALL FUNCTION &apos;FUNCTION_INCLUDE_INFO&apos;
      IMPORTING
        functab = tl_func
      CHANGING
        group   = vl_group
      EXCEPTIONS
        OTHERS  = 0.

    DELETE tl_func WHERE funcname(1) NE &apos;Z&apos;.  &quot; Only Z objects. Ex: Mantain view create two functions named TABLE*

    wl_object-pgmid   = wl_tadir-pgmid.
    wl_object-object  = &apos;FUNC&apos;.
    LOOP AT tl_func INTO wl_func.
      wl_object-obj_name = wl_func-funcname.
      APPEND wl_object TO t_objects.
    ENDLOOP.

    wl_object-pgmid   = wl_tadir-pgmid.
    wl_object-object  = &apos;PROG&apos;.

    DO 99 TIMES. &quot; Max number

      vl_incl_numb = sy-index.

      CALL FUNCTION &apos;CONVERSION_EXIT_ALPHA_INPUT&apos;
        EXPORTING
          input  = vl_incl_numb
        IMPORTING
          output = vl_incl_numb.

      CONCATENATE &apos;L&apos; wl_tadir-obj_name &apos;F&apos; vl_incl_numb INTO wl_object-obj_name.
      CALL FUNCTION &apos;RS_PROGRAM_CHECK_NAME&apos;
        EXPORTING
          progname                     = wl_object-obj_name(40)
        EXCEPTIONS
          database                     = 1
          database_selections          = 2
          function_group               = 3
          function_include             = 4
          no_customer_function_group   = 5
          no_customer_function_include = 6
          reserved_name                = 7
          reserved_name_customer       = 8
          string_error                 = 9
          string_warning               = 10
          string_length_error          = 11
          types_program                = 12
          reserved_name_menu           = 13
          OTHERS                       = 14.
      IF sy-subrc &lt;&gt; 0.
        CONTINUE.
      ENDIF.

      APPEND wl_object TO t_objects.

    ENDDO.

  ENDLOOP.

ENDFORM.                    &quot; BREAK_DOWN_FUNCTION_GROUP

*&amp;---------------------------------------------------------------------*
*&amp;      Form  BREAK_DOWN_CLASSES
*&amp;---------------------------------------------------------------------*
*  Extract Methods from Classes
*----------------------------------------------------------------------*
*      --&gt;PT_TADIR  Object List
*----------------------------------------------------------------------*
FORM break_down_classes  USING pt_tadir TYPE ty_t_tadir.

  DATA: tl_tmdir    TYPE STANDARD TABLE OF tmdir,
        tl_tadir    TYPE ty_t_tadir.

  DATA: wl_tadir    TYPE ty_tadir,
        wl_object   TYPE LINE OF zbctt0006,
        wl_tmdir    TYPE tmdir.

  tl_tadir = pt_tadir.
  DELETE tl_tadir WHERE object NE &apos;CLAS&apos;.

* SS001 By each Function Group, get the Function Modules and the Function Group includes
  LOOP AT tl_tadir INTO wl_tadir.

    wl_tmdir-classname = wl_tadir-obj_name.

    SELECT * &quot; The TMDIR Table has a buffer by the first field (CLASSNAME)
    FROM tmdir
    INTO TABLE tl_tmdir
    WHERE classname EQ wl_tmdir-classname.

    DELETE tl_tmdir WHERE methodname IS INITIAL.

    LOOP AT tl_tmdir INTO wl_tmdir.
      CLEAR wl_object.

      wl_object-pgmid  = wl_tadir-pgmid.
      wl_object-object = &apos;METH&apos;.

      CONCATENATE wl_tmdir-classname
                  wl_tmdir-methodname
      INTO wl_object-obj_name
      SEPARATED BY c_method_splitter.

      APPEND wl_object TO t_objects.

    ENDLOOP.

  ENDLOOP.

ENDFORM.                    &quot; BREAK_DOWN_CLASSES
*&amp;---------------------------------------------------------------------*
*&amp;      Form  READ_METHOD_SOURCE_CODE
*&amp;---------------------------------------------------------------------*
*  Read the Method Source Code
*----------------------------------------------------------------------*
*      --&gt;PV_OBJECT  Name of the object (Method)
*      &lt;--PT_SOURCE  Source Code
*----------------------------------------------------------------------*
FORM read_method_source_code  USING  pv_object TYPE zbces0006-obj_name
                            CHANGING pt_source TYPE rsfb_source
                             RAISING zcx_bapiret2.

  TYPE-POOLS: seop.

  DATA: tl_includes  TYPE STANDARD TABLE OF seop_method_w_include.

  DATA: wl_message     TYPE bapiret2,
        wl_clskey      TYPE seoclskey,
        wl_cpdkey      TYPE seocpdkey,
        wl_includes    TYPE seop_method_w_include.

  DATA: vl_method_name TYPE seocpdname,
        vl_obj_name    TYPE zbces0006-obj_name.

  SPLIT pv_object AT c_method_splitter INTO wl_clskey-clsname vl_method_name.

  CALL FUNCTION &apos;SEO_CLASS_GET_METHOD_INCLUDES&apos;
    EXPORTING
      clskey                       = wl_clskey
    IMPORTING
      includes                     = tl_includes
    EXCEPTIONS
      _internal_class_not_existing = 1
      OTHERS                       = 2.
  IF sy-subrc &lt;&gt; 0.

    wl_message-type       = &apos;W&apos;.
    wl_message-id         = sy-msgid.
    wl_message-number     = sy-msgno.
    wl_message-message_v1 = sy-msgv1.
    wl_message-message_v2 = sy-msgv2.
    wl_message-message_v3 = sy-msgv3.
    wl_message-message_v4 = sy-msgv4.

    RAISE EXCEPTION TYPE zcx_bapiret2
    EXPORTING
      message = wl_message.

  ENDIF.

  wl_cpdkey-clsname = wl_clskey-clsname.
  wl_cpdkey-cpdname = vl_method_name.

  READ TABLE tl_includes
  INTO wl_includes
  WITH KEY cpdkey = wl_cpdkey.

  TRY.
      vl_obj_name = wl_includes-incname.
      PERFORM read_program_source_code USING vl_obj_name
                                    CHANGING pt_source.

    CATCH zcx_bapiret2.

      wl_message-type       = &apos;W&apos;.
      wl_message-id         = &apos;OO&apos;.
      wl_message-number     = 275.
      wl_message-message_v1 = wl_clskey-clsname.
      wl_message-message_v2 = vl_method_name.

      RAISE EXCEPTION TYPE zcx_bapiret2
      EXPORTING
        message = wl_message.

  ENDTRY.

ENDFORM.                    &quot; READ_METHOD_SOURCE_CODE</source>
 </PROG>
 <PROG NAME="ZBCPRR0003" VARCL="X" SUBC="1" RMAND="200" RLOAD="S" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="001" ENTRY="Excel File (*.XLSX) *.XLSX" LENGTH="26 "/>
    <textElement ID="I" KEY="002" ENTRY="Graph - Quantity per Module" LENGTH="30 "/>
    <textElement ID="I" KEY="003" ENTRY="Col: QUAN" LENGTH="9 "/>
    <textElement ID="I" KEY="M01" ENTRY="&amp; issues objects founded" LENGTH="39 "/>
    <textElement ID="I" KEY="T01" ENTRY="Errores each program" LENGTH="20 "/>
    <textElement ID="R" ENTRY="ZBCTM0000 output report" LENGTH="70 "/>
    <textElement ID="S" KEY="CK_XLS" ENTRY="        Only show report" LENGTH="28 "/>
    <textElement ID="S" KEY="P_ID" ENTRY="D       ." LENGTH="20 "/>
   </language>
   <language SPRAS="S">
    <textElement ID="I" KEY="001" ENTRY="Fich.Excel (*.XLSX) *.XLSX" LENGTH="26 "/>
    <textElement ID="I" KEY="002" ENTRY="Gráfico - Cantidad por Módulos" LENGTH="30 "/>
    <textElement ID="I" KEY="003" ENTRY="Col: CANT" LENGTH="9 "/>
    <textElement ID="I" KEY="M01" ENTRY="Se encontraron &amp; objetos con conflictos" LENGTH="39 "/>
    <textElement ID="I" KEY="T01" ENTRY="Errores por programa" LENGTH="20 "/>
    <textElement ID="R" ENTRY="Reporte de salida para ZBCTM0000" LENGTH="32 "/>
    <textElement ID="S" KEY="CK_XLS" ENTRY="        Sólo generar informe" LENGTH="28 "/>
    <textElement ID="S" KEY="P_ID" ENTRY="D       ." LENGTH="20 "/>
   </language>
  </textPool>
  <dynpros>
   <dynpro PROG="ZBCPRR0003" DNUM="0100" FNUM="0100" BZMX="200 " BZBR="255 " MILI="192 " MICO="37 " MALI="0 " MACO="0 " NOLI="200 " NOCO="255 " VALP="0 " CUAN="G" SPRA="S" DTEXT="Resultados">
    <dynprofield FNAM="CC_0100" DIDX="00C8" FLG1="00" FLG2="30" FLG3="00" FILL="U" FMB1="30" FMB2="00" LENG="FF" LINE="01" COLN="02" LANF="00" LBLK="00" LREP="00" AUTH="101" AGLT="07" ADEZ="1D"/>
    <dynprofield DIDX="0000" FLG1="80" FLG2="10" FLG3="00" FMB1="00" FMB2="00" LENG="14" LINE="FF" COLN="01" LTYP="O" LANF="00" LBLK="00" LREP="00" TYPE="CHAR" AGLT="00" ADEZ="00" STXT="____________________"/>
    <dynproflowsource>PROCESS BEFORE OUTPUT.
  MODULE status_0100.
  MODULE pbo.

PROCESS AFTER INPUT.
  MODULE user_command_0100.</dynproflowsource>
   </dynpro>
  </dynpros>
  <pfstatus>
   <pfstatus_sta CODE="ST0100" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Status GUI 0100"/>
   <pfstatus_fun CODE="BACK" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back"/>
   <pfstatus_fun CODE="EXIT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Finalizar"/>
   <pfstatus_fun CODE="INFORME" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REPORT_TEMPLATE" ICON_ID="@QH@" FUN_TEXT="Generar Informe" PATH="G"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="INFORME" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="Tratar" PATH="T"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="13"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="BACK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="INFORME" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="EXIT" FUNNO="001"/>
   <pfstatus_set STATUS="ST0100" FUNCTION="BACK"/>
   <pfstatus_set STATUS="ST0100" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="ST0100" FUNCTION="INFORME"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status GUI 0100"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="D" INT_NOTE="Status GUI 0100"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="D" INT_NOTE="Status GUI 0100"/>
   <pfstatus_tit CODE="TT0100" TEXT="&amp;"/>
  </pfstatus>
  <source>*----------------------------------------------------------------------*
* Proy/Inc:     Upgrade Oracle
* Funcional:    Juan Sebastián Soto
* Técnico:      Juan Sebastián Soto
* Fecha:        12.08.2014
* Descripción:  Este programa toma los resultados de la ejecución de
*               ZBCTM0000.
* Empresa:      Atos
*----------------------------------------------------------------------*

REPORT  zbcprr0003.

INCLUDE zbcprr0003_top.
INCLUDE zbcprr0003_sel.
INCLUDE zbcprr0003_f01.
INCLUDE zbcprr0003_o01.
INCLUDE zbcprr0003_i01.

START-OF-SELECTION.

  PERFORM lee_errores.
  PERFORM cuenta_errores.

  IF ck_xls IS INITIAL.
    CALL SCREEN 0100.
  ELSE.
    PERFORM generar_informe.
  ENDIF.</source>
 </PROG>
 <PROG NAME="ZBCPRR0003_SEL" VARCL="X" SUBC="I" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Pantalla de selección del programa ZBCPRR0003" LENGTH="45 "/>
   </language>
  </textPool>
  <source>PARAMETERS: p_id   TYPE zbctm0001-id_ejection.

PARAMETERS: ck_xls AS CHECKBOX DEFAULT &apos;X&apos;.</source>
 </PROG>
 <PROG NAME="ZBCPRR0003_F01" VARCL="X" SUBC="I" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Include ZBCPRR0003_F01" LENGTH="22 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp;      Form  LEE_ERRORES
*&amp;---------------------------------------------------------------------*
FORM lee_errores.

  SELECT *
  FROM zbctm0000
  INTO TABLE t_zbctm0000.

  IF p_id IS NOT INITIAL.
    DELETE t_zbctm0000 WHERE id_ejection NE p_id.
  ENDIF.

ENDFORM.                    &quot; LEE_ERRORES

*&amp;---------------------------------------------------------------------*
*&amp;      Form  MOSTRAR_RESULTADOS
*&amp;---------------------------------------------------------------------*
FORM mostrar_resultados.

  DATA: ol_cc   TYPE REF TO cl_gui_custom_container,
        ol_alv  TYPE REF TO cl_gui_alv_grid.

  DATA: tl_fieldcat TYPE lvc_t_fcat.

  DATA: vl_cant     TYPE i,
        vl_cant_c   TYPE c LENGTH 3,
        vl_message  TYPE string.

  vl_cant = LINES( t_zbctm0000 ).
  vl_cant_c = vl_cant.

  vl_message = text-m01.
  REPLACE FIRST OCCURRENCE OF &apos;&amp;&apos; IN vl_message WITH vl_cant_c.
  MESSAGE vl_message TYPE &apos;S&apos;.

  REPLACE &apos;&amp;&apos; IN vl_message WITH vl_cant_c.
  MESSAGE vl_message TYPE &apos;S&apos;.


  CREATE OBJECT ol_cc
    EXPORTING
      container_name              = &apos;CC_0100&apos;
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CREATE OBJECT ol_alv
    EXPORTING
      i_parent          = ol_cc
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  PERFORM fieldcat CHANGING tl_fieldcat.

  CALL METHOD ol_alv-&gt;set_table_for_first_display
    CHANGING
      it_outtab                     = t_salida
      it_fieldcatalog               = tl_fieldcat
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    &quot; MOSTRAR_RESULTADOS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  FIELDCAT
*&amp;---------------------------------------------------------------------*
FORM fieldcat  CHANGING pt_fieldcat TYPE lvc_t_fcat.

  DATA: ol_alv_magic TYPE REF TO zcl_alv.

  DATA: wl_salida TYPE ty_salida.

  CREATE OBJECT ol_alv_magic.

  CALL METHOD ol_alv_magic-&gt;fill_catalog_merge
    EXPORTING
      structure = wl_salida
      texts     = abap_true
      convexit  = abap_true
      tabname   = &apos;T_SALIDA&apos;
    IMPORTING
      fieldcat  = pt_fieldcat.

ENDFORM.                    &quot; FIELDCAT

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CUENTA_ERRORES
*&amp;---------------------------------------------------------------------*
FORM cuenta_errores.

  DATA: tl_zbctm0001 TYPE STANDARD TABLE OF zbctm0001.

  DATA: wl_zbctm0001 TYPE zbctm0001,
        wl_salida    TYPE ty_salida.

  CHECK t_zbctm0000 IS NOT INITIAL.

  SELECT *
  FROM zbctm0001
  INTO TABLE tl_zbctm0001
  FOR ALL ENTRIES IN t_zbctm0000
  WHERE obj_name    EQ t_zbctm0000-obj_name
    AND id_ejection EQ t_zbctm0000-id_ejection.

  SORT tl_zbctm0001 BY obj_name    ASCENDING
                       id_ejection ASCENDING
                       counter     DESCENDING.

  DELETE ADJACENT DUPLICATES FROM tl_zbctm0001 COMPARING obj_name id_ejection.

  LOOP AT tl_zbctm0001 INTO wl_zbctm0001.

    wl_salida-cant     = wl_zbctm0001-counter.
    wl_salida-obj_name = wl_zbctm0001-obj_name.
    APPEND wl_salida TO t_salida.

  ENDLOOP.

ENDFORM.                    &quot; CUENTA_ERRORES

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GENERAR_INFORME
*&amp;---------------------------------------------------------------------*
FORM generar_informe.

  DATA: ol_excel         TYPE REF TO zcl_excel,
        ol_worksheet     TYPE REF TO zcl_excel_worksheet,
        ol_cx_excel      TYPE REF TO zcx_excel.

  DATA: tl_cant_modulos  TYPE STANDARD TABLE OF ty_cant_modulos.

  DATA: wl_table_settings  TYPE zexcel_s_table_settings.

  DATA: vl_worksheet_title TYPE zexcel_sheet_title,
        vl_message         TYPE string.

  TRY.

      CREATE OBJECT ol_excel.

      ol_worksheet = ol_excel-&gt;get_active_worksheet( ).

      vl_worksheet_title = text-t01.
      ol_worksheet-&gt;set_title( vl_worksheet_title ).

      wl_table_settings-top_left_column = &apos;A&apos;.
      wl_table_settings-top_left_row    = &apos;1&apos;.

      CALL METHOD ol_worksheet-&gt;bind_table
        EXPORTING
          ip_table          = t_salida
          is_table_settings = wl_table_settings.

      PERFORM consolidar_modulos CHANGING tl_cant_modulos.

      wl_table_settings-top_left_column = &apos;D&apos;.
      wl_table_settings-top_left_row    = &apos;1&apos;.

      CALL METHOD ol_worksheet-&gt;bind_table
        EXPORTING
          ip_table          = tl_cant_modulos
          is_table_settings = wl_table_settings.

      PERFORM crear_torta USING tl_cant_modulos
                       CHANGING ol_excel.

      PERFORM grabar_excel USING ol_excel.

    CATCH zcx_excel INTO ol_cx_excel.

      vl_message = ol_cx_excel-&gt;if_message~get_text( ).

      MESSAGE vl_message TYPE &apos;A&apos;.

  ENDTRY.

ENDFORM.                    &quot; GENERAR_INFORME

*&amp;---------------------------------------------------------------------*
*&amp;      Form  GRABAR_EXCEL
*&amp;---------------------------------------------------------------------*
FORM grabar_excel  USING po_excel TYPE REF TO zcl_excel.

  DATA: ol_writer          TYPE REF TO zif_excel_writer.

  DATA: tl_rawdata         TYPE solix_tab.

  DATA: vl_bytecount       TYPE i,
        vl_xdata           TYPE xstring,
        vl_filename        TYPE string,
        vl_path            TYPE string,
        vl_fullpath        TYPE string,
        vl_xlsx            TYPE string.

  CREATE OBJECT ol_writer TYPE zcl_excel_writer_2007.

  vl_xdata = ol_writer-&gt;write_file( po_excel ).

  tl_rawdata   = cl_bcs_convert=&gt;xstring_to_solix( iv_xstring  = vl_xdata ).
  vl_bytecount = XSTRLEN( vl_xdata ).

  vl_xlsx = text-001.

  CALL METHOD cl_gui_frontend_services=&gt;file_save_dialog
    EXPORTING
      default_extension = vl_xlsx
      file_filter       = vl_xlsx
    CHANGING
      filename          = vl_filename
      path              = vl_path
      fullpath          = vl_fullpath.

  cl_gui_frontend_services=&gt;gui_download( EXPORTING bin_filesize = vl_bytecount
                                                    filename     = vl_fullpath
                                                    filetype     = &apos;BIN&apos;
                                           CHANGING data_tab     = tl_rawdata ).

ENDFORM.                    &quot; GRABAR_EXCEL

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CONSOLIDAR_MODULOS
*&amp;---------------------------------------------------------------------*
FORM consolidar_modulos  CHANGING pt_cant_modulos TYPE ty_t_cant_modulos.

  TYPES: BEGIN OF tyl_tadir,
           devclass  TYPE tadir-devclass,
           obj_name  TYPE tadir-obj_name,
         END OF tyl_tadir.

  DATA: tl_tadir TYPE STANDARD TABLE OF tyl_tadir.

  DATA: wl_tadir        TYPE tyl_tadir,
        wl_cant_modulos TYPE ty_cant_modulos,
        wl_salida       TYPE ty_salida.

  LOOP AT t_salida INTO wl_salida.
    wl_tadir-obj_name = wl_salida-obj_name.
    APPEND wl_tadir TO tl_tadir.
  ENDLOOP.

  SELECT devclass obj_name
  FROM tadir
  INTO TABLE tl_tadir
  FOR ALL ENTRIES IN tl_tadir
  WHERE pgmid    EQ &apos;R3TR&apos;
    AND obj_name EQ tl_tadir-obj_name.

  SORT tl_tadir BY devclass.

  LOOP AT tl_tadir INTO wl_tadir.

    REPLACE FIRST OCCURRENCE OF &apos;Z&apos;  IN wl_tadir-devclass WITH &apos;&apos;.
    REPLACE FIRST OCCURRENCE OF &apos;PD&apos; IN wl_tadir-devclass WITH &apos;&apos;.
    wl_cant_modulos-modulo = wl_tadir-devclass(2).

    CASE wl_cant_modulos-modulo.
      WHEN &apos;WM&apos;.
        wl_cant_modulos-modulo = &apos;MM&apos;.
      WHEN &apos;PM&apos; OR &apos;QM&apos;.
        wl_cant_modulos-modulo = &apos;PP&apos;.
    ENDCASE.

    wl_cant_modulos-cant   = 1.
    COLLECT wl_cant_modulos INTO pt_cant_modulos.
    CLEAR wl_cant_modulos.

  ENDLOOP.

ENDFORM.                    &quot; CONSOLIDAR_MODULOS

*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREAR_TORTA
*&amp;---------------------------------------------------------------------*
FORM crear_torta  USING    pt_cant_modulos TYPE ty_t_cant_modulos
                  CHANGING po_excel        TYPE REF TO zcl_excel.

  DATA: ol_worksheet  TYPE REF TO zcl_excel_worksheet,
        ol_drawing    TYPE REF TO zcl_excel_drawing,
        ol_pie        TYPE REF TO zcl_excel_graph_pie.

  DATA: wl_upper  TYPE zexcel_drawing_location,
        wl_lower  TYPE zexcel_drawing_location.

  DATA: vl_to      TYPE zexcel_cell_row,
        vl_sheet   TYPE zexcel_sheet_title,
        vl_sername TYPE string.

  vl_to = LINES( pt_cant_modulos ) + 1.

  CREATE OBJECT ol_pie.

  vl_sheet   = text-t01.
  vl_sername = text-003.

  CALL METHOD ol_pie-&gt;create_serie
    EXPORTING
      ip_order        = 0
      ip_sheet        = vl_sheet
      ip_lbl_from_col = &apos;D&apos;
      ip_lbl_from_row = &apos;2&apos;
      ip_lbl_to_col   = &apos;D&apos;
      ip_lbl_to_row   = vl_to
      ip_ref_from_col = &apos;E&apos;
      ip_ref_from_row = &apos;2&apos;
      ip_ref_to_col   = &apos;E&apos;
      ip_ref_to_row   = vl_to
      ip_sername      = vl_sername.

  &quot; Set style
  ol_pie-&gt;set_style( zcl_excel_graph=&gt;c_style_15 ).
  ol_pie-&gt;set_show_percent( &apos;1&apos; ).
  ol_pie-&gt;set_varycolor( &apos;1&apos; ).

  &quot; Get active sheet (Pie sheet)
  ol_worksheet = po_excel-&gt;get_active_worksheet( ).

  vl_sheet = text-002.

  &quot; Create global drawing, set type as pie chart, assign chart, set position and media type
  ol_drawing = ol_worksheet-&gt;excel-&gt;add_new_drawing(
                    ip_type  = zcl_excel_drawing=&gt;type_chart
                    ip_title = vl_sheet ).

  ol_drawing-&gt;graph = ol_pie.
  ol_drawing-&gt;graph_type = zcl_excel_drawing=&gt;c_graph_pie.

*  &quot;Set chart position (anchor 2 cells)

  wl_upper-col = 4.
  wl_upper-row = vl_to + 1.

  wl_lower-row = 30.
  wl_lower-col = 12.
  ol_drawing-&gt;set_position2(
    EXPORTING
      ip_from   = wl_upper
      ip_to     = wl_lower ).

  ol_drawing-&gt;set_media(
    EXPORTING
      ip_media_type = zcl_excel_drawing=&gt;c_media_type_xml ).

  ol_worksheet-&gt;add_drawing( ol_drawing ).

ENDFORM.                    &quot; CREAR_TORTA</source>
 </PROG>
 <PROG NAME="ZBCPRR0003_TOP" VARCL="X" SUBC="I" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Declaraciones globales del programa ZBCPRR0003" LENGTH="46 "/>
   </language>
  </textPool>
  <source>TYPE-POOLS: abap.

TYPES: BEGIN OF ty_salida,
         obj_name TYPE zbctm0001-obj_name,
         cant     TYPE zbcde0013,
       END OF ty_salida,
       BEGIN OF ty_cant_modulos,
         modulo   TYPE comt_cfgm_engine_trace_module,
         cant     TYPE zbcde0013,
       END OF ty_cant_modulos.

TYPES: ty_t_cant_modulos TYPE STANDARD TABLE OF ty_cant_modulos.

DATA: t_zbctm0000 TYPE STANDARD TABLE OF zbctm0000,
      t_salida    TYPE STANDARD TABLE OF ty_salida.

DATA: v_titulo TYPE syst-title.</source>
 </PROG>
 <PROG NAME="ZBCPRR0003_O01" VARCL="X" SUBC="I" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Include ZBCPRR0003_O01" LENGTH="22 "/>
   </language>
  </textPool>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZBCPRR0003_O01 .
*----------------------------------------------------------------------*

*&amp;---------------------------------------------------------------------*
*&amp;      Module  PBO  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo OUTPUT.
  PERFORM mostrar_resultados.
ENDMODULE.                 &quot; PBO  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_0100  OUTPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

  SET PF-STATUS &apos;ST0100&apos;.
  v_titulo = sy-title.
  SET TITLEBAR &apos;TT0100&apos; OF PROGRAM &apos;ZBCPRR0003&apos; WITH v_titulo.

ENDMODULE.                 &quot; STATUS_0100  OUTPUT</source>
 </PROG>
 <PROG NAME="ZBCPRR0003_I01" VARCL="X" SUBC="I" RMAND="200" RLOAD="S" UCCHECK="X">
  <textPool>
   <language SPRAS="S">
    <textElement ID="R" ENTRY="Include ZBCPRR0003_I01" LENGTH="22 "/>
   </language>
  </textPool>
  <source>*----------------------------------------------------------------------*
***INCLUDE ZBCPRR0003_I01 .
*----------------------------------------------------------------------*
*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0100  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE sy-ucomm.
    WHEN &apos;BACK&apos;.
      LEAVE TO SCREEN 0.
    WHEN &apos;EXIT&apos;.
      LEAVE PROGRAM.
    WHEN &apos;INFORME&apos;.
      PERFORM generar_informe.
  ENDCASE.

ENDMODULE.                 &quot; USER_COMMAND_0100  INPUT</source>
 </PROG>
</nugget>
